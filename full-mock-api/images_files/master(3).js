// Generated by CoffeeScript 1.8.0
Traitify.ui.widget("slideDeck", function(widget, options) {
  if (options == null) {
    options = Object();
  }
  widget.data.add("slideResponses", Object());
  widget.states.add("animating");
  widget.states.add("finished");
  widget.states.add("initialized");
  widget.states.add("transitionEndListens");
  widget.states.add("imageWaiting");
  widget.callbacks.add("Initialize");
  widget.callbacks.add("Finished");
  widget.callbacks.add("AddSlide");
  widget.callbacks.add("Me");
  widget.callbacks.add("NotMe");
  widget.callbacks.add("AdvanceSlide");
  widget.data.persist("slideValues");
  widget.data.add("imageCache", Array());
  widget.data.add("fetchErroring");
  widget.styleDependency("all");
  widget.styleDependency("slide-deck");
  widget.states.add("trying", true);
  widget.dataDependency("Slides");
  if (!widget.data.get("slideValues")) {
    widget.data.add("slideValues", Array());
  }
  widget.actions.add("processSlide", function(options) {
    widget.actions.trigger("addSlide", options);
    return widget.actions.trigger("afterSlideSave");
  });
  widget.actions.add("addSlide", function(options) {
    var slideValues;
    widget.data.add("lastSlideTime", widget.data.get("currentSlideTime"));
    widget.data.add("currentSlideTime", new Date().getTime());
    slideValues = widget.data.get("slideValues");
    slideValues.push({
      id: options.id,
      response: options.value,
      time_taken: widget.data.get("currentSlideTime") - widget.data.get("lastSlideTime")
    });
    return widget.data.set("slideValues", slideValues);
  });
  widget.actions.add("afterSlideSave", function() {
    var addSlide, sentSlides, widgets;
    widgets = widget.widgets;
    widget.data.counter("sentSlides").up();
    sentSlides = widget.data.get("sentSlides");
    if (widget.data.get("slideValues").length % 10 === 0 || sentSlides === widget.data.get("slidesToPlayLength")) {
      addSlide = Traitify.addSlides(widget.assessmentId, widget.data.get("slideValues"));
      return addSlide.then(function(response) {
        var callbacks;
        widget.data.set("slideValues", Array());
        widget.callbacks.trigger("addSlide");
        if (sentSlides === widget.data.get("slidesToPlayLength")) {
          widget.nodes.get("main").innerHTML = "";
          if (widget.options && widget.options.showResults !== false) {
            widgets = widget.widgets;
            if (widgets.personalityTypes) {
              callbacks = widgets.personalityTypes.callbacks;
              widgets.personalityTypes = Traitify.ui.load("personalityTypes", widget.assessmentId, widgets.personalityTypes.target || widget.target, widgets.personalityTypes.options);
              widgets.personalityTypes.callbacks = callbacks;
            }
            if (widgets.personalityTraits) {
              callbacks = widgets.personalityTraits.callbacks;
              widgets.personalityTraits = Traitify.ui.load("personalityTraits", widget.assessmentId, widgets.personalityTraits.target || widget.target, widgets.personalityTraits.options);
              callbacks = widgets.personalityTraits.callbacks;
              widgets.personalityTraits.callbacks = callbacks;
            }
            if (widgets.results) {
              callbacks = widgets.results.callbacks;
              widgets.results = Traitify.ui.load("results", widget.assessmentId, widgets.results.target || widget.target, widgets.results.options);
              widgets.results.callbacks = callbacks;
            }
          }
          return widget.callbacks.trigger("Finished");
        }
      });
    }
  });
  widget.helpers.add("getProgressBarNumbers", function(initialize) {
    var completed, currentPosition, notCompleted, slideLength;
    slideLength = widget.data.get("Slides").length;
    completed = widget.data.get("SlidesCompleted").length;
    notCompleted = widget.data.get("SlidesNotCompleted").length;
    currentPosition = completed + widget.data.get("sentSlides");
    if (!initialize) {
      currentPosition += 1;
    }
    return Math.round((currentPosition / slideLength) * 100);
  });
  widget.views.add("internetFailure", function() {
    var loadingInner;
    widget.views.render("wifiLoading");
    loadingInner = this.tags.get("loading").innerHTML;
    this.tags.get("loading").innerHTML = "";
    this.tags.div("refreshButton", "Refresh.").appendTo("loading");
    this.tags.get("refreshButton").onclick = function() {
      widget.views.tags.get("loading").innerHTML = loadingInner;
      return widget.actions.trigger("fetchNext");
    };
    return this.tags.get("wifiLoading");
  });
  widget.views.add("wifiLoading", function() {
    if (!this.tags.get("wifiLoading")) {
      this.tags.div("wifiLoading");
      this.tags.div("loading").appendTo("wifiLoading");
      this.tags.div("loadingText", "Loading").appendTo("loading");
    }
    return this.tags.get("wifiLoading");
  });
  widget.views.add("slideDeckContainer", function() {
    var cover, slidesContainer, slidesLeft;
    slidesContainer = this.tags.div("tfSlideDeckContainer");
    cover = this.tags.div("cover");
    cover.innerHTML = "Landscape mode is not currently supported";
    slidesContainer.appendChild(cover);
    slidesLeft = widget.helpers.getProgressBarNumbers("initializing");
    slidesContainer.appendChild(widget.views.render("progressBar", slidesLeft));
    slidesContainer.appendChild(this.render("slides", widget.data.get("SlidesNotCompleted")));
    slidesContainer.appendChild(this.render("meNotMe"));
    return slidesContainer;
  });
  widget.views.add("meNotMe", function() {
    var meNotMeContainer;
    meNotMeContainer = this.tags.div("meNotMeContainer");
    widget.nodes.set("me", this.tags.div("me"));
    widget.nodes.set("notMe", this.tags.div("notMe"));
    widget.nodes.get("notMe").innerHTML = "NOT ME";
    widget.nodes.get("me").innerHTML = "ME";
    meNotMeContainer.appendChild(widget.nodes.get("me"));
    meNotMeContainer.appendChild(widget.nodes.get("notMe"));
    widget.nodes.set("meNotMeContainer", meNotMeContainer);
    return meNotMeContainer;
  });
  widget.views.add("slides", function(slidesData) {
    var placeHolderSlide, slides;
    slides = this.tags.div("slides");
    placeHolderSlide = widget.views.render("slide", slidesData[0]);
    placeHolderSlide.appendTo("slides");
    placeHolderSlide.className += " placeholder";
    widget.nodes.set("currentSlide", widget.views.render("slide", slidesData[0]));
    widget.nodes.get("currentSlide").className += " active";
    widget.nodes.get("currentSlide").appendTo("slides");
    if (slidesData[1]) {
      widget.nodes.set("nextSlide", widget.views.render("slide", slidesData[1]));
      widget.nodes.get("nextSlide").appendTo("slides");
    }
    widget.nodes.set("slides", slides);
    return slides;
  });
  widget.views.add("slide", function(slideData) {
    var image, slide, slideCaption, slideImg;
    slide = this.tags.div("slide");
    slideCaption = this.tags.div("caption");
    slideCaption.innerHTML = slideData.caption;
    image = slideData.image_desktop_retina;
    slideImg = this.tags.div(["slide.image"], {
      style: {
        backgroundImage: "url('" + image + "')",
        backgroundPosition: "" + slideData.focus_x + "% " + slideData.focus_y + "%"
      }
    });
    slideImg.appendChild(slideCaption);
    slide.appendChild(slideImg);
    return slide;
  });
  widget.views.add("progressBar", function(percentFinished) {
    var progressBar, progressBarInner;
    progressBar = this.tags.div("progress-bar");
    progressBarInner = this.tags.div("progress-bar-inner");
    progressBarInner.style.width = percentFinished + "%";
    progressBar.appendChild(progressBarInner);
    widget.nodes.set("progressBar", progressBar);
    widget.nodes.set("progressBarInner", progressBarInner);
    return progressBar;
  });
  widget.views.add("loadingAnimation", function() {
    this.tags.div("loading");
    this.tags.div("symbol").appendTo("loading");
    this.tags.i("leftDot").appendTo("symbol");
    this.tags.i("rightDot").appendTo("symbol");
    return this.tags.get("loading");
  });
  widget.data.add("touched", Object());
  widget.helpers.add("touch", function(touchNode, callBack) {
    var touched;
    touched = widget.data.get("touched");
    touchNode.addEventListener('touchstart', function(event) {
      var touchobj;
      touchobj = event.changedTouches[0];
      touched.startx = parseInt(touchobj.clientX);
      return touched.starty = parseInt(touchobj.clientY);
    });
    return touchNode.addEventListener('touchend', function(event) {
      var touchDifferenceX, touchDifferenceY, touchobj;
      touchobj = event.changedTouches[0];
      touchDifferenceX = Math.abs(touched.startx - parseInt(touchobj.clientX));
      touchDifferenceY = Math.abs(touched.starty - parseInt(touchobj.clientY));
      if (touchDifferenceX < 2 && touchDifferenceX < 2) {
        return callBack();
      }
    });
  });
  widget.helpers.add("onload", function(callBack) {
    if (window.addEventListener) {
      return window.addEventListener('load', callBack);
    }
  });
  widget.actions.add("me", function() {
    var afterNextSlide, currentSlide;
    currentSlide = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") - 1];
    afterNextSlide = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") + 1];
    if (!widget.states.get("animating") && widget.nodes.get("nextSlide") && currentSlide && widget.actions.trigger("cacheCheck?")) {
      if (!widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide")]) {
        widget.actions.trigger("loadingAnimation");
      }
      widget.states.set("animating", true);
      widget.actions.trigger("advanceSlide");
      widget.actions.trigger("processSlide", {
        id: currentSlide.id,
        value: true
      });
      widget.data.counter("currentSlide").up();
      return widget.callbacks.trigger("Me");
    } else if (!widget.states.get("animating") && widget.nodes.get().nextSlide && currentSlide) {
      widget.actions.trigger("setWifiLoading", true);
      return widget.actions.trigger("failSlideAnimation");
    }
  });
  widget.actions.add("notMe", function() {
    var afterNextSlide, currentSlide;
    currentSlide = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") - 1];
    afterNextSlide = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") + 1];
    if (!widget.states.get("animating") && widget.nodes.get("nextSlide") && currentSlide && widget.actions.trigger("cacheCheck?")) {
      if (!widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide")]) {
        widget.actions.trigger("loadingAnimation");
      }
      widget.states.set("animating", true);
      widget.actions.trigger("advanceSlide");
      currentSlide = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") - 1];
      widget.actions.trigger("processSlide", {
        id: currentSlide.id,
        value: false
      });
      widget.data.counter("currentSlide").up();
      return widget.callbacks.trigger("notMe");
    } else if (!widget.states.get("animating") && widget.nodes.get().nextSlide && currentSlide) {
      widget.actions.trigger("setWifiLoading", true);
      return widget.actions.trigger("failSlideAnimation");
    }
  });
  widget.actions.add("advanceSlide", function() {
    var callback, nextSlideData;
    widget.nodes.get("progressBarInner").style.width = widget.helpers.getProgressBarNumbers() + "%";
    if (widget.nodes.get("playedSlide")) {
      widget.nodes.get("slides").removeChild(widget.nodes.get("playedSlide"));
    }
    widget.nodes.set("playedSlide", widget.nodes.get("currentSlide"));
    widget.nodes.set("currentSlide", widget.nodes.get("nextSlide"));
    callback = function(event) {
      widget.actions.trigger("advancedSlide");
      return widget.states.set("animating", false);
    };
    widget.nodes.get("currentSlide").addEventListener('webkitTransitionEnd', callback, false);
    widget.nodes.get("currentSlide").addEventListener('transitionend', callback, false);
    widget.nodes.get("currentSlide").addEventListener('oTransitionEnd', callback, false);
    widget.nodes.get("currentSlide").addEventListener('otransitionend', callback, false);
    widget.nodes.get("playedSlide").className += " played";
    widget.nodes.get("currentSlide").className += " active";
    nextSlideData = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") + 1];
    if (nextSlideData) {
      widget.nodes.set("nextSlide", widget.views.render("slide", nextSlideData));
      widget.nodes.get("slides").appendChild(widget.nodes.get().nextSlide);
      return widget.callbacks.trigger("AdvanceSlide");
    }
  });
  widget.actions.add("loadingAnimation", function() {
    widget.nodes.get("meNotMeContainer").className += " hide";
    widget.nodes.get("slides").removeChild(widget.nodes.get("currentSlide"));
    return widget.nodes.get("slides").insertBefore(widget.views.render("loadingAnimation"), widget.nodes.get("slides").firstChild);
  });
  widget.data.add("imageCache", Object());
  widget.actions.add("prefetchSlides", function() {
    widget.data.add("slideIndex", 0);
    return widget.actions.trigger("fetchNext");
  });
  widget.actions.add("fetchNext", function() {
    var image, slide, slides;
    widget.data.set("fetchErroring", false);
    slides = widget.data.get("SlidesNotCompleted");
    slide = slides[widget.data.get("slideIndex")];
    image = new Image();
    image.id = slide.id;
    image.src = slide.image_desktop_retina;
    image.onerror = function() {
      var onerror, onload, src;
      if (!widget.data.get("fetchErroring")) {
        widget.data.set("fetchSlides", true);
        widget.data.set("fetchErroring", true);
        setTimeout(function() {
          widget.data.set("fetchSlides", false);
          widget.actions.trigger("setWifiLoading", false);
          return widget.views.render("internetFailure").appendTo("tfSlideDeckContainer");
        }, 30000);
      }
      onload = this.onload;
      onerror = this.onerror;
      src = this.src;
      if (widget.data.get("fetchSlides")) {
        return setTimeout(function() {
          var errorImage;
          errorImage = new Image();
          errorImage.onload = onload;
          errorImage.onerror = onerror;
          return errorImage.src = src;
        }, 1000);
      }
    };
    return image.onload = function() {
      widget.data.get("imageCache")[this.src] = this;
      widget.data.counter("slideIndex").up();
      if (widget.data.get("SlidesNotCompleted")[widget.data.get("slideIndex")]) {
        widget.actions.trigger("fetchNext");
      }
      if (widget.actions.trigger("cacheCheck?")) {
        return widget.actions.trigger("setWifiLoading", false);
      }
    };
  });
  widget.actions.add("cacheCheck?", function() {
    var currentSlide;
    currentSlide = widget.data.get("SlidesNotCompleted")[widget.data.get("currentSlide") + 1];
    if (currentSlide) {
      return !!widget.data.get("imageCache")[currentSlide.image_desktop_retina];
    } else if (widget.data.get("currentSlide") + 1 >= widget.data.get("SlidesNotCompleted").length) {
      return true;
    }
  });
  widget.actions.add("setWifiLoading", function(value) {
    var wifiLoading;
    if (value) {
      wifiLoading = widget.views.render("wifiLoading");
      wifiLoading.className += " fade-in";
      return wifiLoading.appendTo("tfSlideDeckContainer");
    } else if (widget.views.tags.get("wifiLoading")) {
      widget.views.tags.get("wifiLoading").parentNode.removeChild(widget.views.tags.get("wifiLoading"));
      return widget.views.tags.library.set("wifiLoading", null);
    }
  });
  widget.actions.add("failSlideAnimation", function() {
    return widget.nodes.get("currentSlide").className = widget.nodes.get("currentSlide").className + " not-ready-animation";
  });
  widget.actions.add("setContainerSize", function() {
    var width;
    width = widget.nodes.get("main").scrollWidth;
    widget.nodes.get("container").className = widget.nodes.get("container").className.replace(" medium", "");
    widget.nodes.get("container").className = widget.nodes.get("container").className.replace(" large", "");
    widget.nodes.get("container").className = widget.nodes.get("container").className.replace(" small", "");
    if (width < 480) {
      return widget.nodes.get("container").className += " small";
    } else if (width < 768) {
      return widget.nodes.get("container").className += " medium";
    }
  });
  widget.actions.add("onRotate", function(rotateEvent) {
    var orientationEvent, supportsOrientationChange;
    supportsOrientationChange = "onorientationchange" in window;
    orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
    return window.addEventListener(orientationEvent, function(event) {
      return rotateEvent(event);
    }, false);
  });
  widget.initialization.events.add("Setup Data", function() {
    var completed, playedSlideIds, slides, uncompleted;
    slides = widget.data.get("Slides");
    playedSlideIds = widget.data.get("slideValues").map(function(slide) {
      return slide.id;
    });
    widget.data.add("currentSlide", 1);
    completed = widget.data.get("Slides").filter(function(slide) {
      return slide.response || playedSlideIds.indexOf(slide.id) !== -1;
    });
    uncompleted = widget.data.get("Slides").filter(function(slide) {
      return !slide.response && playedSlideIds.indexOf(slide.id) === -1;
    });
    widget.data.add("SlidesCompleted", completed);
    widget.data.add("SlidesNotCompleted", uncompleted);
    widget.data.add("sentSlides", 0);
    return widget.data.add("slidesToPlayLength", widget.data.get("SlidesNotCompleted").length);
  });
  widget.initialization.events.add("Handle device type", function() {
    widget.nodes.set("container", widget.views.render("slideDeckContainer"));
    if (widget.device) {
      widget.nodes.get("container").className += " " + widget.device;
      widget.nodes.get("container").className += " mobile phone";
      widget.nodes.get("container").className += " non-touch";
    }
    if (options && options.size) {
      widget.nodes.get("container").className += " " + options.size;
    }
    widget.nodes.get("main").appendChild(widget.nodes.get().container);
    if (!widget.actions.trigger("cacheCheck?")) {
      return widget.actions.trigger("setWifiLoading", true);
    }
  });
  widget.initialization.events.add("Actions", function() {
    if (widget.device === "iphone" || widget.device === "ipad") {
      widget.helpers.touch(widget.nodes.get("notMe"), function() {
        return widget.actions.trigger("notMe");
      });
      return widget.helpers.touch(widget.nodes.get("me"), function() {
        return widget.actions.trigger("me");
      });
    } else {
      widget.nodes.get("notMe").onclick = function() {
        return widget.actions.trigger("notMe");
      };
      return widget.nodes.get("me").onclick = function() {
        return widget.actions.trigger("me");
      };
    }
  });
  widget.initialization.events.add("Prefetch Slides", function() {
    return widget.actions.trigger("prefetchSlides");
  });
  widget.initialization.events.add("Setup Screen", function() {
    var setupScreen;
    widget.actions.trigger("setContainerSize");
    window.onresize = function() {
      if (!widget.device) {
        return widget.actions.trigger("setContainerSize");
      }
    };
    if (widget.device && widget.device) {
      setupScreen = function() {
        widget.helpers.add("windowOrienter", function() {
          return widget.nodes.get("main").style.height = window.innerHeight + "px";
        });
        return widget.helpers.windowOrienter();
      };
      widget.actions.trigger("onRotate", function(event) {
        return widget.helpers.windowOrienter();
      });
      widget.helpers.onload(function() {
        return setupScreen();
      });
      return setupScreen();
    }
  });
  return widget.initialization.events.add("initialized", function() {
    widget.states.set("initialized", true);
    widget.callbacks.trigger("Initialize");
    return widget.data.add("currentSlideTime", new Date().getTime());
  });
});
