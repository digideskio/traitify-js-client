// Generated by CoffeeScript 1.8.0
Traitify.ui.widget("results", function(widget, options) {
  widget.states.add("initialized");
  widget.callbacks.add("Initialize");
  widget.dataDependency("PersonalityTypes");
  widget.styleDependency("all");
  widget.styleDependency("results/default");
  widget.initialization.events.add("Setup Data", function() {
    widget.views.render("Results").appendTo("main");
    return widget.callbacks.trigger("Initialize");
  });
  widget.views.add("Results", function() {
    this.tags.div("tfResults");
    this.render("Personality Blend").appendTo("tfResults");
    return this.tags.library.get("tfResults");
  });
  widget.views.add("Personality Blend", function() {
    var personalityBlendData, personalityTypeData;
    if (widget.data.get("PersonalityTypes").personality_blend) {
      this.tags.div("personalityBlend");
      personalityBlendData = widget.data.get("PersonalityTypes").personality_blend;
      this.render("Personality Blend Badges").appendTo("personalityBlend");
      this.tags.div("name", personalityBlendData.name).appendTo("personalityBlend");
      this.tags.div("blendDescription", personalityBlendData.description).appendTo("personalityBlend");
    } else {
      this.tags.div("personalityType");
      personalityTypeData = widget.data.get("PersonalityTypes").personality_types[0].personality_type;
      this.render("Personality Type Badge").appendTo("personalityType");
      this.tags.div("name", personalityTypeData.name).appendTo("personalityType");
      this.tags.div("typeDescription", personalityTypeData.description).appendTo("personalityType");
    }
    return this.tags.library.get("personalityBlend") || this.tags.library.get("personalityType");
  });
  widget.views.add("Personality Blend Badges", function() {
    var hexColorOne, hexColorTwo, personalityBlendData, typeOneData, typeTwoData;
    personalityBlendData = widget.data.get("PersonalityTypes").personality_blend;
    typeOneData = personalityBlendData.personality_type_1;
    hexColorOne = widget.helpers.hexToRGB(typeOneData.badge.color_1);
    this.tags.div("badgesContainer");
    this.tags.div("leftBadge", {
      style: {
        backgroundColor: "rgba(" + (hexColorOne.join(', ')) + ", .07)",
        borderColor: "#" + typeOneData.badge.color_1
      }
    }).appendTo("badgesContainer");
    this.tags.img("leftBadgeImage", typeOneData.badge.image_medium).appendTo("leftBadge");
    typeTwoData = personalityBlendData.personality_type_2;
    hexColorTwo = widget.helpers.hexToRGB(typeTwoData.badge.color_1);
    this.tags.div("rightBadge", {
      style: {
        "background-color": "rgba(" + (hexColorTwo.join(', ')) + ", .07)",
        "border-color": "#" + typeTwoData.badge.color_1
      }
    }).appendTo("badgesContainer");
    this.tags.img("leftBadgeImage", typeTwoData.badge.image_medium).appendTo("rightBadge");
    return this.tags.library.get("badgesContainer");
  });
  return widget.views.add("Personality Type Badge", function() {
    var badge, hexColor, image, personalityTypeData;
    personalityTypeData = widget.data.get("PersonalityTypes").personality_types[0].personality_type;
    this.tags.div("badgesContainer");
    hexColor = widget.helpers.hexToRGB(personalityTypeData.badge.color_1);
    badge = this.tags.div("badge", {
      style: {
        backgroundColor: "rgba(" + (hexColor.join(', ')) + ", .07)",
        borderColor: "#" + personalityTypeData.badge.color_1
      }
    }).appendTo("badgesContainer");
    image = this.tags.img("badgeImage", personalityTypeData.badge.image_medium).appendTo("badge");
    return this.tags.library.get("badgesContainer");
  });
});
