// Generated by CoffeeScript 1.8.0
var Actions, Callbacks, Cookie, Data, Helpers, Library, Stack, States, Tags, Views, Widget,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Helpers = (function() {
  function Helpers() {}

  Helpers.prototype.toDash = function(text) {
    if (text) {
      return text.replace(/([A-Z])/g, function($1) {
        return "-" + $1.toLowerCase();
      });
    }
  };

  Helpers.prototype.hexToRGB = function(hex) {
    var matches;
    if (hex.length !== 0) {
      matches = hex.match(/([\da-f]{2})([\da-f]{2})([\da-f]{2})/i);
      return matches.slice(1).map(function(m) {
        return parseInt(m, 16);
      });
    }
  };

  Helpers.prototype.add = function(name, helper) {
    return this[name] = helper;
  };

  return Helpers;

})();

Cookie = (function() {
  function Cookie() {
    this.scope = "default";
  }

  Cookie.prototype.set = function(name, item, time) {
    var expires;
    this.time = time != null ? time : 2;
    time = new Date();
    time.setTime(time.getTime() + (this.time * 60000));
    expires = "expires=" + time.toUTCString();
    item = JSON.stringify(item);
    return document.cookie = ("tf-cookie-" + this.scope + "-" + name + "=" + item + "; ") + expires;
  };

  Cookie.prototype.get = function(name) {
    var c, ca, i, tfCookie;
    ca = document.cookie.split(";");
    i = 0;
    name = "tf-cookie-" + this.scope + "-" + name + "=";
    while (i < ca.length) {
      c = ca[i];
      while (c.charAt(0) === " ") {
        c = c.substring(1);
      }
      if (c.indexOf(name) !== -1) {
        tfCookie = c.substring(name.length, c.length);
      }
      i++;
    }
    if (tfCookie) {
      return JSON.parse(tfCookie);
    }
  };

  return Cookie;

})();

Library = (function() {
  function Library() {
    this.store = Object();
  }

  Library.prototype.add = function(name, item) {
    return this.store[name] = item;
  };

  Library.prototype.set = function(name, item) {
    return this.add(name, item);
  };

  Library.prototype.get = function(name) {
    if (name) {
      return this.store[name];
    } else {
      return this.store;
    }
  };

  return Library;

})();

Callbacks = (function() {
  function Callbacks(parent) {
    this.parent = parent;
    this.library = new Library();
    this.states = new Library();
  }

  Callbacks.prototype.trigger = function(name) {
    if (this.library.get(name)) {
      return this.library.get(name)(this);
    } else {
      return this.states.add(name, true);
    }
  };

  Callbacks.prototype.add = function(name) {
    var library, states;
    states = this.states;
    library = this.library;
    return this.parent["on" + name] = function(callback) {
      if (states.get(name)) {
        return callback();
      } else {
        return library.add(name, callback);
      }
    };
  };

  return Callbacks;

})();

Tags = (function() {
  function Tags() {
    this.library = new Library();
  }

  Tags.prototype.div = function(name, options, content) {
    if (typeof options === "string") {
      content = options;
      options = Object();
    }
    return this.tag(name, "div", options, content);
  };

  Tags.prototype.img = function(name, src, options) {
    if (options == null) {
      options = Object();
    }
    options.src = src;
    return this.tag(name, "img", options);
  };

  Tags.prototype.i = function(name, options, content) {
    return this.tag(name, "i", options, content);
  };

  Tags.prototype.get = function(name) {
    return this.library.get(name);
  };

  Tags.prototype.tag = function(fullName, tag, attributes, content) {
    var attributeName, className, element, name, styleName, tagIsList, _i, _len, _ref;
    element = document.createElement(tag);
    tagIsList = false;
    if (typeof fullName === "object") {
      fullName = fullName[0];
      tagIsList = true;
    }
    if (fullName.indexOf(".") !== -1) {
      name = fullName.split(".");
      name = name[name.length - 1];
    } else {
      name = fullName;
    }
    if (attributes == null) {
      attributes = Object();
    }
    className = (new Helpers()).toDash(name);
    if (attributes["class"] == null) {
      attributes["class"] = "";
    }
    attributes["class"] = attributes["class"].length === 0 ? className : " " + className;
    for (attributeName in attributes) {
      if (attributeName !== "style") {
        element.setAttribute(attributeName, attributes[attributeName]);
      } else {
        _ref = Object.keys(attributes["style"]);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          styleName = _ref[_i];
          element.style[styleName] = attributes[attributeName][styleName];
        }
      }
    }
    if (tagIsList) {
      if (!this.library.get(fullName)) {
        this.library.add(fullName, Array());
      }
      this.library.get(fullName).push(element);
    } else {
      this.library.add(fullName, element);
    }
    element.library = this.library;
    element.appendTo = function(target) {
      var index;
      if (typeof target === "object") {
        fullName = target[0];
        index = target[1];
        return this.library.store[fullName][index].appendChild(this);
      } else {
        return this.library.get(target).appendChild(this);
      }
    };
    if (content) {
      element.innerHTML = content;
    }
    return element;
  };

  return Tags;

})();

Data = (function(_super) {
  __extends(Data, _super);

  function Data() {
    Data.__super__.constructor.call(this);
    this.cookies = new Cookie();
    this.persists = Object();
  }

  Data.prototype.add = function(name, item) {
    Data.__super__.add.call(this, name, item);
    if (this.persists[name]) {
      this.cookies.set(name, item, this.persists[name]);
    }
    return item;
  };

  Data.prototype.get = function(name) {
    if (this.persists[name] && !this.store[name]) {
      return this.set(name, this.cookies.get(name));
    } else {
      return Data.__super__.get.call(this, name);
    }
  };

  Data.prototype.counter = function(name) {
    var store;
    store = this.store;
    return {
      up: function(number) {
        return store[name] += number || 1;
      },
      down: function(number) {
        return store[name] -= number || 1;
      }
    };
  };

  Data.prototype.persist = function(name, time) {
    if (time == null) {
      time = 2;
    }
    this.persists[name] = time;
    return void 0;
  };

  return Data;

})(Library);

Views = (function() {
  function Views() {
    this.library = new Library();
    this.tags = new Tags();
  }

  Views.prototype.add = function(name, view) {
    return this.library.add(name, view);
  };

  Views.prototype.render = function(name, options) {
    if (this.library.get(name)) {
      return this.library.get(name).call(this, options);
    }
  };

  return Views;

})();

Stack = (function() {
  function Stack() {
    this.events = new Library();
  }

  Stack.prototype.trigger = function(name) {
    var event, eventName, events, _i, _len, _ref, _results;
    if (name) {
      return this.events.get(name)();
    } else {
      events = this.events.get();
      _ref = Object.keys(events);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eventName = _ref[_i];
        event = events[eventName];
        _results.push(event());
      }
      return _results;
    }
  };

  return Stack;

})();

Actions = (function(_super) {
  __extends(Actions, _super);

  function Actions() {
    return Actions.__super__.constructor.apply(this, arguments);
  }

  Actions.prototype.trigger = function(name, options) {
    if (this.get(name)) {
      return this.get(name)(options);
    }
  };

  return Actions;

})(Library);

States = (function(_super) {
  __extends(States, _super);

  function States() {
    return States.__super__.constructor.apply(this, arguments);
  }

  States.prototype.add = function(name, value) {
    if (value == null) {
      value = false;
    }
    return States.__super__.add.call(this, name, value);
  };

  States.prototype.set = function(name, value) {
    return this.add(name, value);
  };

  return States;

})(Library);

Widget = (function() {
  Widget.prototype.version = "3.0.0 HNA";

  function Widget(target) {
    this.target = target;
    this.views = new Views();
    this.library = new Library();
    this.data = new Data();
    this.dataDependencies = Array();
    this.styles = Array();
    this.states = new States();
    this.callbacks = new Callbacks(this);
    this.helpers = new Helpers();
    this.actions = new Actions();
    this.initialization = new Stack();
    this.views.data = this.data;
    this.userAgent = Traitify.ui.userAgent;
    this.views.tags.library.add("main", document.querySelector(this.target));
    this.views.tags.library.get("main").innerHTML = "";
    if (this.userAgent.match(/iPad/i)) {
      this.device = "ipad";
    }
    if (this.userAgent.match(/iPhone/i)) {
      this.device = "iphone";
    }
    if (this.userAgent.match(/Android/i)) {
      this.device = "android";
    }
    if (this.userAgent.match(/BlackBerry/i)) {
      this.device = "blackberry";
    }
    if (this.userAgent.match(/webOS/i)) {
      this.device = "webos";
    }
    this.nodes = this.views.tags.library;
    this;
  }

  Widget.prototype.dataDependency = function(dependencyName) {
    return this.dataDependencies.push(dependencyName);
  };

  Widget.prototype.styleDependency = function(styleName) {
    return this.styles.push(styleName);
  };

  Widget.prototype.run = function() {
    var style, styleElement, _i, _len, _ref;
    _ref = this.styles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      style = _ref[_i];
      styleElement = document.createElement("style");
      styleElement.innerHTML = Traitify.ui.styles[style];
      this.nodes.get("main").appendChild(styleElement);
    }
    return this.initialization.trigger();
  };

  return Widget;

})();
