// Generated by CoffeeScript 1.7.1
var describe;

describe = function(description, testSuite, options) {
  var Builder;
  Builder = Object();
  Builder.description = description;
  Builder.test = function(title, testCase) {
    this.errors = Array();
    this.testCase = testCase;
    this.assert = function(assertion, assertionCode, assertionType) {
      var error;
      if (assertion) {
        if (options && options.logger) {
          print("<span style='color:#00ff00'>*</span>");
        }
        if (options && !options.silent) {
          return console.log("*");
        }
      } else {
        error = "X " + title + " on " + this.description + " failed " + assertionCode + ", " + assertionType;
        console.log(error);
        return this.errors.push(error);
      }
    };
    this.it = function(testItem) {
      this.testItem = testItem;
      this.should_be_equal_to = function(assertedItem) {
        return this.assert(this.testItem === assertedItem);
      };
      this.should_have_text = function(assertedItem) {
        return this.assert(this.testItem.indexOf(assertedItem) !== -1, this.testItem, "should_have_text");
      };
      this.should_be_a_number = function() {
        return this.assert(typeof this.testItem === "number", this.testItem, "should_be_a_number");
      };
      this.should_be_an_integer = function() {
        var doesNotHavePeriod, isNumber;
        isNumber = typeof this.testItem === "number";
        this.testItem = "" + this.testItem;
        doesNotHavePeriod = !(("" + this.testItem).indexOf(".") !== -1);
        return this.assert(isNumber && doesNotHavePeriod, this.testItem, "should_be_an_integer");
      };
      this.should_be_a_float = function() {
        var hasPeriod, isNumber;
        isNumber = typeof this.testItem === "number";
        hasPeriod = ("" + this.testItem).indexOf(".") !== -1;
        return this.assert(isNumber && hasPeriod, this.testItem, "should_be_a_float");
      };
      this.should_be_a_string = function() {
        return this.assert(typeof this.testItem === "string", this.testItem, "should_be_a_string");
      };
      return this;
    };
    return this.testCase();
  };
  Builder.testSuite = testSuite;
  return Builder.testSuite();
};

describe("testSuite Test", function() {
  this.test("should be", function() {
    this.it("should have text").should_have_text("have");
    this.it("should be equal to").should_be_equal_to("should be equal to");
    this.it("should be a string").should_be_a_string();
    this.it(1).should_be_a_number();
    this.it(1).should_be_an_integer();
    return this.it(1.1).should_be_a_float();
  });
  return {
    silent: true
  };
});
