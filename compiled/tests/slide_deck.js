// Generated by CoffeeScript 1.8.0
var body, playedAssessment, unPlayedAssessment;

unPlayedAssessment = "unplayed";

playedAssessment = "played";

body = document.getElementsByTagName("body")[0];

body.innerHTML = body.innerHTML + "<div class='widget' style='display:none'></div>";

QUnit.test("Slide Deck Hooks Exist", function(assert) {
  var Builder;
  Traitify.setVersion("v1");
  Traitify.setHost("api-sandbox.traitify.com");
  Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
  document.getElementsByClassName("widget")[0].innerHTML = "";
  Builder = Traitify.ui.slideDeck(unPlayedAssessment, ".widget", Object());
  assert.equal(!Builder.onInitialize, false, "on Initialize Event Succeeds!");
  assert.equal(!Builder.onMe, false, "on Me Event Succeeds!");
  assert.equal(!Builder.onNotMe, false, "on Not Me Event Succeeds!");
  assert.equal(!Builder.onAddSlide, false, "on Add Slide Event Succeeds!");
  assert.equal(!Builder.onFinish, false, "on Finish Event Succeeds!");
  return assert.equal(!Builder.onAdvanceSlide, false, "on Advance Slide Event Succeeds!");
});

QUnit.module("Testing API Version 1", {
  setup: function() {
    Traitify.setVersion("v1");
    Traitify.setHost("api-sandbox.traitify.com");
    Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
    return document.getElementsByClassName("widget")[0].innerHTML = "";
  }
});

QUnit.asyncTest("Slide Deck Widget Initialize", function(assert) {
  var Builder;
  Builder = Traitify.ui.slideDeck(unPlayedAssessment, ".widget", Object());
  return Builder.onInitialize(function() {
    var builderNodeNames, firstSlide;
    assert.equal(Builder.data.slides[0].caption, "Navigating", "First Slide Caption Succeeds!");
    firstSlide = Builder.nodes.currentSlide.getElementsByClassName("caption")[0].innerHTML;
    assert.equal(firstSlide, "Navigating", "First Slide is on DOM Succeeds!");
    builderNodeNames = ["main", "progressBar", "progressBarInner", "currentSlide", "nextSlide", "slides", "me", "notMe", "meNotMeContainer"];
    assert.equal(JSON.stringify(Object.keys(Builder.nodes)), JSON.stringify(builderNodeNames), "Node Names append to Builder Succeeds!");
    return QUnit.start();
  });
});

QUnit.test("Slide Deck Widget Appears on Screen", function(assert) {
  var Builder;
  Builder = Traitify.ui.slideDeck(unPlayedAssessment, ".widget", Object());
  return assert.equal(!document.getElementsByClassName("slide active")[0], false, "on Initialize Event Succeeds!");
});

QUnit.asyncTest("Results Widget Appears on Screen", function(assert) {
  var Builder;
  assert.equal(!document.getElementsByClassName("personality-types")[0], true, "Personality types container exists");
  Builder = Traitify.ui.slideDeck(playedAssessment, ".widget", Object());
  return Builder.results.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("personality-types")[0], false, "Personality types container exists");
    assert.equal(!document.getElementsByClassName("print-button")[0], false, "Print button exists");
    return QUnit.start();
  });
});

QUnit.asyncTest("Results Widget Shows Traits When Requested", function(assert) {
  var Builder;
  assert.equal(!document.getElementsByClassName("personality-types")[0], true, "Personality types container exists");
  Builder = Traitify.ui.slideDeck(playedAssessment, ".widget", {
    traits: true
  });
  return Builder.results.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("toggle-traits")[0], false, "Personality types container exists");
    return QUnit.start();
  });
});

QUnit.asyncTest("Results Widget Does Not Show Traits View Upon Request", function(assert) {
  var Builder;
  assert.equal(!document.getElementsByClassName("personality-types")[0], true, "Personality types container exists");
  Builder = Traitify.ui.slideDeck(playedAssessment, ".widget");
  return Builder.results.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("toggle-traits")[0], true, "Personality types container exists");
    return QUnit.start();
  });
});
