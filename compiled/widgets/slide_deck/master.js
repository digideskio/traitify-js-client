// Generated by CoffeeScript 1.8.0
Traitify.ui.slideDeck = function(Widget, options) {
  var touched;
  Widget.data.slideResponses = Object();
  Widget.states.add("animating");
  Widget.states.add("finished");
  Widget.states.add("initialized");
  Widget.callbacks.add("Initialize");
  Widget.callbacks.add("Finished");
  Widget.callbacks.add("AddSlide");
  Widget.callbacks.add("Me");
  Widget.callbacks.add("NotMe");
  Widget.callbacks.add("AdvanceSlide");
  Widget.callbacks.add("finished");
  Widget.data.slidesLeft = function() {
    return Widget.data.slides.all.length - Widget.data.currentSlide;
  };
  Widget.data.slideValues = Array();
  Widget.data.addSlide = function(id, value) {
    Widget.data.lastSlideTime = Widget.data.currentSlideTime;
    Widget.data.currentSlideTime = new Date().getTime();
    Widget.data.slideValues.push({
      id: id,
      response: value,
      time_taken: Widget.data.currentSlideTime - Widget.data.lastSlideTime
    });
    Widget.data.sentSlides += 1;
    if (Widget.data.slideValues.length % 10 === 0 || Widget.data.sentSlides === Widget.data.slidesToPlayLength) {
      return Traitify.addSlides(Widget.data.assessmentId, Widget.data.slideValues, function(response) {
        if (Widget.callbacks.addSlide) {
          Widget.callbacks.addSlide(Widget);
        }
        if (Widget.data.sentSlides === Widget.data.slidesToPlayLength) {
          Widget.nodes.main.innerHTML = "";
          if (options.showResults !== false) {
            Widget.nodes.main.innerHTML = Traitify.ui.styles;
            Traitify.ui.loadResults(Widget.data.assessmentId, Widget.data.selector, options.results);
          }
          if (Widget.callbacks.finished) {
            return Widget.callbacks.finished(Widget);
          }
        }
      });
    }
  };
  Widget.data.getProgressBarNumbers = function(initialize) {
    var currentLength, currentPosition, slideLength, value;
    slideLength = Widget.data.totalSlideLength;
    currentLength = Widget.data.slides.all.length;
    currentPosition = Widget.data.sentSlides;
    if (initialize !== "initializing") {
      currentPosition += 1;
    }
    value = slideLength - currentLength + currentPosition;
    return (value / Widget.data.totalSlideLength) * 100;
  };
  Widget.partials.slideDeckContainer = function() {
    var cover, slidesContainer, slidesLeft;
    slidesContainer = this.div({
      "class": "tf-slide-deck-container"
    });
    cover = this.div({
      "class": "cover"
    });
    cover.innerHTML = "Landscape mode is not currently supported";
    slidesContainer.appendChild(cover);
    slidesLeft = Widget.data.getProgressBarNumbers("initializing");
    slidesContainer.appendChild(Widget.partials.progressBar(slidesLeft));
    slidesContainer.appendChild(this.slides(Widget.data.slides.all));
    slidesContainer.appendChild(this.meNotMe());
    return slidesContainer;
  };
  Widget.partials.meNotMe = function() {
    var meNotMeContainer;
    meNotMeContainer = this.div({
      "class": "me-not-me-container"
    });
    Widget.nodes.me = this.div({
      "class": "me"
    });
    Widget.nodes.notMe = this.div({
      "class": "not-me"
    });
    Widget.nodes.notMe.innerHTML = "Not Me";
    Widget.nodes.me.innerHTML = "Me";
    meNotMeContainer.appendChild(Widget.nodes.me);
    meNotMeContainer.appendChild(Widget.nodes.notMe);
    Widget.nodes.meNotMeContainer = meNotMeContainer;
    return meNotMeContainer;
  };
  Widget.partials.slides = function(slidesData) {
    var placeHolderSlide, slides;
    slides = this.div({
      "class": "slides"
    });
    placeHolderSlide = Widget.partials.slide(slidesData[0]);
    placeHolderSlide.className += " placeholder";
    slides.appendChild(placeHolderSlide);
    Widget.nodes.currentSlide = Widget.partials.slide(slidesData[0]);
    Widget.nodes.currentSlide.className += " active";
    slides.appendChild(Widget.nodes.currentSlide);
    if (slidesData[1]) {
      Widget.nodes.nextSlide = Widget.partials.slide(slidesData[1]);
      slides.appendChild(Widget.nodes.nextSlide);
    } else {
      Widget.nodes.nextSlide = false;
    }
    Widget.nodes.slides = slides;
    return slides;
  };
  Widget.partials.slide = function(slideData) {
    var slide, slideCaption, slideImg;
    slide = this.div({
      "class": "slide"
    });
    slideCaption = this.div({
      "class": "caption"
    });
    slideCaption.innerHTML = slideData.caption;
    if (Widget.device) {
      slideImg = this.div({
        style: "background-image:url('" + slideData.image_desktop_retina + "'); background-position:" + slideData.focus_x + "% " + slideData.focus_y + "%;'",
        "class": "image"
      });
      slideImg.appendChild(slideCaption);
    } else {
      slideImg = this.img({
        src: slideData.image_desktop_retina
      });
      slide.appendChild(slideCaption);
    }
    slide.appendChild(slideImg);
    return slide;
  };
  Widget.partials.progressBar = function(percentFinished) {
    var progressBar, progressBarInner;
    progressBar = this.div({
      "class": "progress-bar"
    });
    progressBarInner = this.div({
      "class": "progress-bar-inner"
    });
    progressBarInner.style.width = percentFinished + "%";
    progressBar.appendChild(progressBarInner);
    Widget.nodes.progressBar = progressBar;
    Widget.nodes.progressBarInner = progressBarInner;
    return progressBar;
  };
  Widget.partials.loadingAnimation = function() {
    var leftDot, loadingContainer, loadingSymbol, rightDot;
    loadingContainer = this.div({
      "class": "loading"
    });
    leftDot = this.i(Object());
    rightDot = this.i(Object());
    loadingSymbol = this.div({
      "class": "symbol"
    });
    loadingSymbol.appendChild(leftDot);
    loadingSymbol.appendChild(rightDot);
    loadingContainer.appendChild(loadingSymbol);
    return loadingContainer;
  };
  touched = Object();
  Widget.helpers.touch = function(touchNode, callBack) {
    touchNode.addEventListener('touchstart', function(event) {
      var touchobj;
      touchobj = event.changedTouches[0];
      touched.startx = parseInt(touchobj.clientX);
      return touched.starty = parseInt(touchobj.clientY);
    });
    return touchNode.addEventListener('touchend', function(event) {
      var touchDifferenceX, touchDifferenceY, touchobj;
      touchobj = event.changedTouches[0];
      touchDifferenceX = Math.abs(touched.startx - parseInt(touchobj.clientX));
      touchDifferenceY = Math.abs(touched.starty - parseInt(touchobj.clientY));
      if (touchDifferenceX < 2 && touchDifferenceX < 2) {
        return callBack();
      }
    });
  };
  Widget.helpers.onload = function(callBack) {
    if (window.addEventListener) {
      return window.addEventListener('load', callBack);
    } else if (window.attachEvent) {
      return window.attachEvent('onload', callBack);
    }
  };
  Widget.events.me = function() {
    var currentSlide;
    if (!Widget.states.animating() && !Widget.data.slidesLeft() !== 1) {
      if (!Widget.data.slides.all[Widget.data.currentSlide]) {
        Widget.events.loadingAnimation();
      }
      Widget.states.animating(true);
      Widget.events.advanceSlide();
      currentSlide = Widget.data.slides.all[Widget.data.currentSlide - 1];
      Widget.data.addSlide(currentSlide.id, true);
      Widget.data.currentSlide += 1;
      if (Widget.callbacks.me) {
        return Widget.callbacks.me(Widget);
      }
    }
  };
  Widget.events.notMe = function() {
    var currentSlide;
    if (!Widget.states.animating() && Widget.nodes.nextSlide) {
      if (!Widget.data.slides.all[Widget.data.currentSlide]) {
        Widget.events.loadingAnimation();
      }
      Widget.states.animating(true);
      Widget.events.advanceSlide();
      currentSlide = Widget.data.slides.all[Widget.data.currentSlide - 1];
      Widget.data.addSlide(currentSlide.id, false);
      Widget.data.currentSlide += 1;
      if (Widget.callbacks.notMe) {
        return Widget.callbacks.notMe(Widget);
      }
    }
  };
  Widget.events.advanceSlide = function() {
    var nextSlideData;
    Widget.prefetchSlides();
    Widget.nodes.progressBarInner.style.width = Widget.data.getProgressBarNumbers() + "%";
    if (Widget.nodes.playedSlide) {
      Widget.nodes.slides.removeChild(Widget.nodes.playedSlide);
    }
    Widget.nodes.playedSlide = Widget.nodes.currentSlide;
    Widget.nodes.currentSlide = Widget.nodes.nextSlide;
    Widget.nodes.currentSlide.addEventListener('webkitTransitionEnd', function(event) {
      if (Widget.events.advancedSlide) {
        Widget.events.advancedSlide();
      }
      return Widget.states.animating(false);
    }, false);
    Widget.nodes.currentSlide.addEventListener('transitionend', function(event) {
      if (Widget.events.advancedSlide) {
        Widget.events.advancedSlide();
      }
      return Widget.states.animating(false);
    }, false);
    Widget.nodes.currentSlide.addEventListener('oTransitionEnd', function(event) {
      if (Widget.events.advancedSlide) {
        Widget.events.advancedSlide();
      }
      return Widget.states.animating(false);
    }, false);
    Widget.nodes.currentSlide.addEventListener('otransitionend', function(event) {
      if (Widget.events.advancedSlide) {
        Widget.events.advancedSlide();
      }
      return Widget.states.animating(false);
    }, false);
    Widget.nodes.playedSlide.className += " played";
    Widget.nodes.currentSlide.className += " active";
    nextSlideData = Widget.data.slides.all[Widget.data.currentSlide + 1];
    if (nextSlideData) {
      Widget.nodes.nextSlide = Widget.partials.slide(nextSlideData);
      Widget.nodes.slides.appendChild(Widget.nodes.nextSlide);
    }
    if (Widget.callbacks.advanceSlide) {
      return Widget.callbacks.advanceSlide(Widget);
    }
  };
  Widget.events.loadingAnimation = function() {
    Widget.nodes.meNotMeContainer.className += " hide";
    Widget.nodes.slides.removeChild(Widget.nodes.currentSlide);
    return Widget.nodes.slides.insertBefore(Widget.partials.loadingAnimation(), Widget.nodes.slides.firstChild);
  };
  Widget.imageCache = Object();
  Widget.prefetchSlides = function(count) {
    var end, slide, start, _i, _len, _ref, _results;
    start = Widget.data.currentSlide - 1;
    end = Widget.data.currentSlide + 9;
    _ref = Widget.data.slides.all.slice(start, end);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slide = _ref[_i];
      if (!Widget.imageCache[slide.image_desktop_retina]) {
        Widget.imageCache[slide.image_desktop_retina] = new Image();
        _results.push(Widget.imageCache[slide.image_desktop_retina].src = slide.image_desktop_retina);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  Widget.events.setContainerSize = function() {
    var width;
    width = Widget.nodes.main.scrollWidth;
    Widget.nodes.container.className = Widget.nodes.container.className.replace(" medium", "");
    Widget.nodes.container.className = Widget.nodes.container.className.replace(" large", "");
    Widget.nodes.container.className = Widget.nodes.container.className.replace(" small", "");
    if (width < 480) {
      return Widget.nodes.container.className += " small";
    } else if (width < 768) {
      return Widget.nodes.container.className += " medium";
    }
  };
  Widget.events.onRotate = function(rotateEvent) {
    var orientationEvent, supportsOrientationChange;
    supportsOrientationChange = "onorientationchange" in window;
    orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
    return window.addEventListener(orientationEvent, function(event) {
      return rotateEvent(event);
    }, false);
  };
  Widget.initialization.events.add("Setup Data", function() {
    Widget.data.currentSlide = 1;
    Widget.data.slides.all = Widget.data.slides.notCompleted.concat(Widget.data.slides.completed);
    Widget.data.sentSlides = 0;
    Widget.data.totalSlideLength = Widget.data.totalSlideLength;
    return Widget.data.slidesToPlayLength = Widget.data.slides.all.length;
  });
  Widget.initialization.events.add("Handle device type", function() {
    Widget.nodes.container = Widget.partials.slideDeckContainer();
    if (Widget.device) {
      Widget.nodes.container.className += " " + Widget.device;
      Widget.nodes.container.className += " mobile phone";
      if (options && options.nonTouch) {
        Widget.nodes.container.className += " non-touch";
      }
    }
    if (options && options.size) {
      Widget.nodes.container.className += " " + options.size;
    }
    return Widget.nodes.main.appendChild(Widget.nodes.container);
  });
  Widget.initialization.events.add("Actions", function() {
    if (Widget.device === "iphone" || Widget.device === "ipad") {
      Widget.helpers.touch(Widget.nodes.notMe, function() {
        return Widget.events.notMe();
      });
      return Widget.helpers.touch(Widget.nodes.me, function() {
        return Widget.events.me();
      });
    } else {
      Widget.nodes.notMe.onclick = function() {
        return Widget.events.notMe();
      };
      return Widget.nodes.me.onclick = function() {
        return Widget.events.me();
      };
    }
  });
  Widget.initialization.events.add("Prefetch Slides", function() {
    return Widget.prefetchSlides();
  });
  Widget.initialization.events.add("Setup Screen", function() {
    var setupScreen;
    Widget.events.setContainerSize();
    window.onresize = function() {
      if (!Widget.device) {
        return Widget.events.setContainerSize();
      }
    };
    if (Widget.device && Widget.device) {
      setupScreen = function() {
        var windowOrienter;
        windowOrienter = function() {
          return Widget.nodes.main.style.height = window.innerHeight + "px";
        };
        return windowOrienter();
      };
      Widget.events.onRotate(function(event) {
        return windowOrienter();
      });
      Widget.helpers.onload(function() {
        return setupScreen();
      });
      return setupScreen();
    }
  });
  Widget.initialization.events.add("initializated", function() {
    Widget.states.initialized(true);
    return Widget.data.currentSlideTime = new Date().getTime();
  });
  return Widget;
};
