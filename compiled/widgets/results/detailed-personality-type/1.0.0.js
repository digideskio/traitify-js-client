// Generated by CoffeeScript 1.7.1
window.Traitify.ui.resultsDetailedPersonalityType = function(assessmentId, selector, options) {
  var Builder, containerWidth, oldOnResize, orientationEvent, phone, stretchSize, supportsOrientationChange, widgetParent, widgetParentCopy;
  Builder = Object();
  if (selector.indexOf("#") !== -1) {
    selector = selector.replace("#", "");
    Builder.main = document.getElementById(selector);
  } else {
    selector = selector.replace(".", "");
    Builder.main = document.getElementsByClassName(selector)[0];
  }
  Builder.partials = Object();
  Builder.partials.make = function(elementType) {
    return document.createElement(elementType);
  };
  Builder.partials.div = function(attributes) {
    var attributeName, div;
    div = this.make("div");
    for (attributeName in attributes) {
      div.setAttribute(attributeName, attributes[attributeName]);
    }
    return div;
  };
  Builder.partials.img = function(attributes) {
    var attributeName, img;
    img = this.make("img");
    for (attributeName in attributes) {
      img.setAttribute(attributeName, attributes[attributeName]);
    }
    return img;
  };
  Builder.partials.personalityType = function(data) {
    var badgeContainer, badgeImage, container, description, informationContainer, localScore, name, score;
    container = this.div({
      "class": "personality-type"
    });
    this.style.personalityType(container, data);
    badgeContainer = this.div({
      "class": "badge-container"
    });
    this.style.badgeContainer(badgeContainer, data);
    container.appendChild(badgeContainer);
    badgeImage = this.img({
      "class": "badge-image",
      src: data.badgeSrc
    });
    this.style.badgeImage(badgeImage, data);
    badgeContainer.appendChild(badgeImage);
    informationContainer = this.div({
      "class": "information-container"
    });
    this.style.informationContainer(informationContainer, data);
    container.appendChild(informationContainer);
    name = this.div({
      "class": "name"
    });
    name.innerHTML = data.name;
    this.style.name(name, data);
    informationContainer.appendChild(name);
    score = this.div({
      "class": "score"
    });
    this.style.score(score, data);
    localScore = data.score >= 0 ? data.score : "(" + (Math.abs(data.score)) + ")";
    score.innerHTML = localScore;
    informationContainer.appendChild(score);
    description = this.div({
      "class": "description"
    });
    description.innerHTML = data.description;
    this.style.description(description, data);
    container.appendChild(description);
    return container;
  };
  Builder.partials.style = Object();
  Builder.partials.style.personalityTypesContainer = function(node, personalityType) {
    return node.style.width = "25.3em";
  };
  Builder.partials.style.personalityType = function(node, personalityType) {
    node.style.backgroundColor = "#" + personalityType.colorOne;
    node.style.display = "inline-block";
    node.style.marginLeft = "0px";
    node.style.width = "25.3em";
    node.style.verticalAlign = "top";
    node.style.fontFamily = 'Helvetica Neue';
    return node.style.fontWeight = 100;
  };
  Builder.partials.style.badgeContainer = function(node, personalityType) {
    node.style.backgroundColor = "#" + personalityType.colorTwo;
    node.style.width = "5em";
    node.style.height = "5em";
    node.style.display = "inline-block";
    node.style.verticalAlign = "top";
    return node.style.textAlign = "center";
  };
  Builder.partials.style.badgeImage = function(node, personalityType) {
    node.style.width = "3.5em";
    node.style.height = "3.5em";
    return node.style.marginTop = ".8em";
  };
  Builder.partials.style.name = function(node, personalityType) {
    node.style.display = "inline-block";
    node.style.marginTop = "7px";
    node.style.marginLeft = "10px";
    node.style.color = "#fff";
    node.style.letterSpacing = "2px";
    node.style.fontSize = "1.4em";
    return node.style.textTransform = "uppercase";
  };
  Builder.partials.style.score = function(node, personalityType) {
    node.style.display = "inline-block";
    node.style.marginTop = "7px";
    node.style.marginRight = "15px";
    node.style.color = "#fff";
    node.style.fontSize = "1.4em";
    node.style.float = "right";
    return node.style.letterSpacing = "1.5px";
  };
  Builder.partials.style.informationContainer = function(node, personalityType) {
    node.style.display = "inline-block";
    node.style.width = "20em";
    return node.style.lineHeight = "4.2em";
  };
  Builder.partials.style.description = function(node, personalityType) {
    node.style.display = "inline-block";
    node.style.width = "20em";
    node.style.backgroundColor = "#" + personalityType.colorThree;
    node.style.color = "#fff";
    node.style.width = "25.3em";
    return node.style.padding = "1em";
  };
  Traitify.getPersonalityTypes(assessmentId, function(data) {
    var localData, personalityType, personalityTypesContainer, _i, _len, _ref;
    personalityTypesContainer = Builder.partials.div({
      "class": "personality-type-container"
    });
    Builder.partials.style.personalityTypesContainer(personalityTypesContainer);
    _ref = data.personality_types;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      personalityType = _ref[_i];
      localData = Object();
      localData.badgeSrc = personalityType.personality_type.badge.image_small;
      localData.name = personalityType.personality_type.name;
      localData.score = personalityType.score;
      localData.colorOne = personalityType.personality_type.badge.color_1;
      localData.colorTwo = personalityType.personality_type.badge.color_2;
      localData.colorThree = personalityType.personality_type.badge.color_3;
      localData.description = personalityType.personality_type.description;
      personalityTypesContainer.appendChild(Builder.partials.personalityType(localData));
    }
    Builder.main.innerHTML = String();
    return Builder.main.appendChild(personalityTypesContainer);
  });
  phone = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  widgetParent = Builder.main.parentNode;
  containerWidth = widgetParent.offsetWidth;
  if (containerWidth > 10) {
    widgetParentCopy = widgetParent.cloneNode(true);
    widgetParentCopy.style.visibility = "hidden";
    widgetParentCopy.style.display = "block";
    document.getElementsByTagName("body")[0].appendChild(widgetParentCopy);
    containerWidth = widgetParent.offsetWidth;
  }
  stretchSize = phone ? 15 : 27;
  if (containerWidth < 568) {
    Builder.main.style.fontSize = containerWidth / stretchSize + "px";
  } else {
    Builder.main.style.fontSize = "16px";
  }
  oldOnResize = window.onresize;
  window.onresize = function(event) {
    if (widgetParent.offsetWidth >= 568 && !phone) {
      return Builder.main.style.fontSize = "16px";
    } else {
      return Builder.main.style.fontSize = widgetParent.offsetWidth / stretchSize + "px";
    }
  };
  supportsOrientationChange = "onorientationchange" in window;
  orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
  window.addEventListener(orientationEvent, (function() {
    var newWidth;
    if (phone) {
      if (oldOnResize) {
        oldOnResize.call(window, event);
      }
      newWidth = Builder.main.offsetWidth / 15;
      return Builder.main.style.fontSize = newWidth + "px";
    }
  }), false);
  return Builder;
};
