// Generated by CoffeeScript 1.7.1
window.Traitify.ui.resultsProp = function(assessmentId, selector, options) {
  var Builder, selectedObject;
  Builder = Object();
  Builder.nodes = Object();
  Builder.states = Object();
  Builder.data = Object();
  if (selector.indexOf("#") !== -1) {
    selector = selector.replace("#", "");
    Builder.nodes.main = document.getElementById(selector);
  } else {
    selector = selector.replace(".", "");
    selectedObject = document.getElementsByClassName(selector);
    Builder.nodes.main = selectedObject ? selectedObject[0] : null;
  }
  if (!Builder.nodes.main) {
    console.log("YOU MUST HAVE A TAG WITH A SELECTOR FOR THIS TO WORK");
    return false;
  }
  Builder.classes = function() {
    var classes, key;
    classes = Builder.main.className.split(" ");
    for (key in classes) {
      classes[key] = "." + classes[key];
    }
    return classes.join("");
  };
  Builder.partials = Object();
  Builder.partials.make = function(elementType, attributes) {
    var attributeName, element;
    element = document.createElement(elementType);
    for (attributeName in attributes) {
      element.setAttribute(attributeName, attributes[attributeName]);
    }
    return element;
  };
  Builder.partials.div = function(attributes) {
    return this.make("div", attributes);
  };
  Builder.partials.img = function(attributes) {
    return this.make("img", attributes);
  };
  Builder.partials.i = function(attributes) {
    return this.make("i", attributes);
  };
  Builder.nodes.personalityTypes = Array();
  Builder.partials.personalityType = function(typeData) {
    var badge, barLeft, barRight, name, nameAndScore, personalityType, score;
    personalityType = this.div({
      "class": "personality-type"
    });
    badge = Builder.partials.badge(typeData.personality_type.badge);
    if (typeData.score < 0) {
      barLeft = Builder.partials.barLeft(Math.abs(typeData.score));
      barRight = Builder.partials.barRight(0);
    } else {
      barLeft = Builder.partials.barLeft(0);
      barRight = Builder.partials.barRight(Math.abs(typeData.score));
    }
    name = this.div({
      "class": "name"
    });
    name.innerHTML = typeData.personality_type.name;
    score = this.div({
      "class": "score"
    });
    score.innerHTML = typeData.score < 0 ? "(" + (Math.round(Math.abs(typeData.score))) + ")" : Math.round(typeData.score);
    nameAndScore = this.div({
      "class": "name-and-score"
    });
    nameAndScore.appendChild(name);
    nameAndScore.appendChild(score);
    personalityType.appendChild(nameAndScore);
    personalityType.appendChild(barLeft);
    personalityType.appendChild(badge);
    personalityType.appendChild(barRight);
    Builder.nodes.personalityTypes.push({
      personalityType: personalityType,
      badge: badge
    });
    return personalityType;
  };
  Builder.partials.badge = function(badgeData) {
    var badge;
    badge = this.div({
      "class": "badge"
    });
    badge.appendChild(this.img({
      src: badgeData.image_large
    }));
    return badge;
  };
  Builder.partials.barLeft = function(scoreData) {
    var barLeft, innerBarLeft, last;
    last = Builder.nodes.personalityTypes.length - 1;
    innerBarLeft = this.div({
      "class": "bar-inner-left"
    });
    innerBarLeft.style.width = scoreData + "%";
    barLeft = this.div({
      "class": "bar-left"
    });
    barLeft.appendChild(innerBarLeft);
    return barLeft;
  };
  Builder.partials.barRight = function(scoreData) {
    var barRight, innerBarRight, last;
    last = Builder.nodes.personalityTypes.length - 1;
    innerBarRight = this.div({
      "class": "bar-inner-right"
    });
    innerBarRight.style.width = scoreData + "%";
    barRight = this.div({
      "class": "bar-right"
    });
    barRight.appendChild(innerBarRight);
    return barRight;
  };
  Builder.partials.toggleTraits = function() {
    var toggleTraits, toggleTraitsContainer;
    toggleTraitsContainer = this.div({
      "class": "toggle-traits-container"
    });
    toggleTraits = this.div({
      "class": "toggle-traits"
    });
    toggleTraits.innerHTML = "Show Traits";
    Builder.nodes.toggleTraits = toggleTraits;
    toggleTraitsContainer.appendChild(toggleTraits);
    return toggleTraitsContainer;
  };
  Builder.nodes.personalityTraits = Array();
  Builder.partials.personalityTrait = function(personalityTraitData) {
    var leftName, personalityTrait, rightName, traitScorePosition;
    personalityTrait = this.div({
      "class": "personality-trait"
    });
    leftName = this.div({
      "class": "left-name"
    });
    leftName.innerHTML = personalityTraitData.left_personality_trait.name;
    rightName = this.div({
      "class": "right-name"
    });
    rightName.innerHTML = personalityTraitData.right_personality_trait.name;
    personalityTrait.appendChild(leftName);
    personalityTrait.appendChild(rightName);
    traitScorePosition = Builder.partials.traitScorePosition(personalityTraitData.score);
    personalityTrait.appendChild(traitScorePosition);
    Builder.nodes.personalityTraits.push({
      personalityTrait: personalityTrait,
      leftName: leftName,
      rightName: rightName,
      score: traitScorePosition
    });
    return personalityTrait;
  };
  Builder.partials.traitScorePosition = function(score) {
    var personalityTraitLine, personalityTraitScore, personalityTraitScoreContainer, personalityTraitScoreWrapper;
    personalityTraitScoreContainer = this.div({
      "class": "score-container"
    });
    personalityTraitScoreWrapper = this.div({
      "class": "score-wrapper"
    });
    personalityTraitScoreContainer.appendChild(personalityTraitScoreWrapper);
    personalityTraitScore = this.div({
      "class": "score"
    });
    personalityTraitScore.style.left = score + "%";
    personalityTraitScoreWrapper.appendChild(personalityTraitScore);
    personalityTraitLine = this.div({
      "class": "line"
    });
    personalityTraitScoreContainer.appendChild(personalityTraitLine);
    return personalityTraitScoreContainer;
  };
  Builder.actions = function() {
    return Builder.nodes.toggleTraits.onclick = function() {
      if (Builder.nodes.personalityTraitContainer) {
        if (Builder.nodes.personalityTypesContainer.style.display === "block") {
          Builder.nodes.personalityTypesContainer.style.display = "none";
          return Builder.nodes.personalityTraitContainer.style.display = "block";
        } else {
          Builder.nodes.personalityTypesContainer.style.display = "block";
          return Builder.nodes.personalityTraitContainer.style.display = "none";
        }
      } else {
        return Traitify.getPersonalityTraits(assessmentId, function(data) {
          var personalityTrait, personalityTraitContainer, _i, _len;
          personalityTraitContainer = Builder.partials.div({
            "class": "personality-traits"
          });
          Builder.nodes.personalityTraitContainer = personalityTraitContainer;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            personalityTrait = data[_i];
            personalityTraitContainer.appendChild(Builder.partials.personalityTrait(personalityTrait));
          }
          Builder.nodes.container.appendChild(personalityTraitContainer);
          Builder.nodes.personalityTypesContainer.style.display = "none";
          return Builder.nodes.personalityTraitContainer.style.display = "block";
        });
      }
    };
  };
  Builder.initialize = function() {
    Builder.nodes.main.innerHTML = "";
    return Traitify.getPersonalityTypes(assessmentId, function(data) {
      var personalityType, style, _i, _len, _ref;
      Builder.data.personalityTypes = data.personality_types;
      style = Builder.partials.make("link", {
        href: "https://s3.amazonaws.com/traitify-cdn/assets/stylesheets/results_prop.css",
        type: 'text/css',
        rel: "stylesheet"
      });
      Builder.nodes.main.appendChild(style);
      Builder.nodes.container = Builder.partials.div({
        "class": "tf-results-prop"
      });
      if (options && options.traits) {
        Builder.nodes.container.appendChild(Builder.partials.toggleTraits());
      }
      Builder.nodes.personalityTypesContainer = Builder.partials.div({
        "class": "personality-types"
      });
      Builder.nodes.container.appendChild(Builder.nodes.personalityTypesContainer);
      _ref = Builder.data.personalityTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        personalityType = _ref[_i];
        Builder.nodes.personalityTypesContainer.appendChild(Builder.partials.personalityType(personalityType));
      }
      Builder.nodes.main.appendChild(Builder.nodes.container);
      return Builder.actions();
    });
  };
  Builder.initialize();
  return Builder;
};
