// Generated by CoffeeScript 1.7.1
window.Traitify.ui.resultsTotem = function(assessmentId, selector, options) {
  var Actions, div, fetch, forEach, image, link, media, partial, partials, render, style, styles, styling, tag, totem;
  partials = Array();
  totem = Object();
  selector = (selector ? selector : this.selector);
  if (selector.indexOf("#") !== -1) {
    totem.element = document.getElementById(selector.replace("#", ""));
  } else {
    totem.element = document.getElementsByClassName(selector.replace(".", ""))[0];
  }
  totem.retina = window.devicePixelRatio > 1;
  totem.data = function(attr) {
    return totem.element.getAttribute("data-" + attr);
  };
  totem.html = function(setter) {
    if (setter) {
      totem.element.innerHTML = setter;
    }
    return totem.element.innerHTML;
  };
  totem.classes = function() {
    var classes, key;
    classes = totem.element.className.split(" ");
    for (key in classes) {
      if (classes[key]) {
        classes[key] = "." + classes[key];
      } else {
        delete classes[key];
      }
    }
    return classes.join("");
  };
  tag = function(type, attributes, content) {
    var key, preparedAttributes, value;
    preparedAttributes = Array();
    for (key in attributes) {
      value = attributes[key];
      preparedAttributes.push(key + "=\"" + value + "\"");
    }
    attributes = attributes || Array();
    if (content === false) {
      return "<" + type + " " + preparedAttributes.join(" ") + " />";
    } else {
      return "<" + type + " " + preparedAttributes.join(" ") + ">\n" + content + "\n</" + type + ">";
    }
  };
  div = function(attributes, content) {
    return tag("div", attributes, content);
  };
  image = function(src, attributes) {
    attributes["src"] = src;
    return tag("img", attributes, false);
  };
  link = function(href, attributes, content) {
    attributes["href"] = href;
    return tag("a", attributes, content);
  };
  style = function(content) {
    return tag("style", {}, content);
  };
  styling = function(selector, content) {
    var formattedContent, key;
    formattedContent = Array();
    for (key in content) {
      formattedContent.push(key + ":" + content[key] + ";");
    }
    return totem.classes() + " " + selector + "{\n" + formattedContent.join("\n") + "}";
  };
  media = function(arg, content) {
    var i;
    for (i in arg) {
      arg = i + ":" + arg[i];
    }
    return "@media screen and (" + arg + ")";
  };
  fetch = function(className) {
    return totem.element.getElementsByClassName(className);
  };
  forEach = function(iterator, callBack) {
    var key, _results;
    _results = [];
    for (key in itorator) {
      _results.push(callBack(itorator[key]));
    }
    return _results;
  };
  styles = function() {
    return style([
      styling(".badge", {
        "width": "5em",
        "display": "inline-block",
        "vertical-align": "middle",
        "background-color": "transparent",
        "padding": "0px",
        "width": "3em",
        "height": "3em",
        "display": "inline-block",
        "position": "relative",
        "z-index": "1",
        "vertical-align": "middle",
        "margin": ".5em 0em",
        "background-position": "center",
        "font-size": "1em"
      }), styling(".panels-container", {
        "height": "6em",
        "width": "11.6em",
        "display": "inline-block",
        "vertical-align": "middle",
        "background-color": "transparent"
      }), styling(".panels-container:hover", {
        "font-weight": "200",
        "font-size": "1.1em",
        "position": "relative",
        "z-index": "2"
      }), styling(".panels-container.active", {
        "font-weight": "200",
        "font-size": "1.1em",
        "position": "relative",
        "z-index": "3"
      }), styling(".left-panel", {
        "height": "6em",
        "width": "5.8em",
        "display": "inline-block",
        "vertical-align": "middle",
        "background-color": "transparent"
      }), styling(".right-panel", {
        "height": "6em",
        "width": "5.8em",
        "display": "inline-block",
        "vertical-align": "middle",
        "background-color": "transparent",
        "text-align": "right"
      }), styling(".positive-bar", {
        "height": "1em",
        "width": "12em",
        "display": "inline-block",
        "overflow": "hidden",
        "margin-top": "2.5em"
      }), styling(".negative-bar", {
        "height": "1em",
        "width": "12em",
        "display": "inline-block",
        "overflow": "hidden"
      }), styling(".personality", {
        "display": "inline-block",
        "font-weight": "100",
        "height": "6em"
      }), styling(".totem-results", {
        "line-height": "1em",
        "width": "41em",
        "padding": "1em 0em",
        "padding-bottom": "1.8em",
        "display": "inline-block",
        "background-color": "#fff",
        "border-radius": ".5em",
        "font-family": '"Helvetica Neue", Helvetica,Arial, sans-serif',
        "background-color": "transparent",
        "box-sizing": "initial"
      }), styling("", {
        "text-align": "center"
      }), styling(".negative-bar .bar-tip", {
        "height": "1em",
        "display": "inline-block",
        "float": "left"
      }), styling(".positive-bar .bar-tip", {
        "height": "1em",
        "display": "inline-block",
        "float": "right"
      }), styling(".negative-bar .inner", {
        "height": "1em",
        "float": "right"
      }), styling(".positive-bar .inner", {
        "height": "1em",
        "float": "left"
      }), styling(".labels", {
        "clear": "both"
      }), styling(".not-me-label", {
        "float": "left",
        "margin-left": ".9em"
      }), styling(".me-label", {
        "float": "right",
        "margin-right": ".9em"
      }), styling(".score", {
        "color": "#fff",
        "display": "inline-block",
        "font-size": "2.4em",
        "margin": "0em .2em",
        "float": "right",
        "line-height": "1em"
      }), styling(".name", {
        "float": "left",
        "z-index": "1",
        "position": "relative",
        "margin-top": "-1.5em",
        "margin-left": "1em",
        "color": "#fff",
        "font-size": "1.2em",
        "letter-spacing": ".1em",
        "text-transform": "uppercase"
      }), styling(".personality-traits-container", {
        "position": "absolute"
      }), styling(".personality-traits .name", {
        "font-size": "1.2em",
        "line-height": "1em",
        "text-transform": "none",
        "float": "none",
        "margin": "0em",
        "padding": ".2em 0em",
        "display": "inline-block",
        "width": "10.3em",
        "text-align": "left"
      }), styling(".personality-traits .score", {
        "margin-right": "3em",
        "margin-top": ".5em",
        "margin-bottom": "0em",
        "line-height": "1em",
        "display": "inline-block",
        "font-size": "1.2em",
        "float": "none",
        "width": "2.7em",
        "margin": "0em",
        "text-align": "right"
      }), styling(".personality-traits .row", {
        "margin": "0px",
        "margin-right": "-.1em",
        "position": "relative",
        "font-size": ".68em",
        "text-align": "left"
      }), styling(".negative-bar .line", {
        "border-top": "solid 1px #d3d3d3",
        "width": "12em",
        "height": "50%",
        "position": "absolute",
        "margin-top": ".5em",
        "z-index": "-1"
      }), styling(".positive-bar .line", {
        "border-top": "solid 1px #d3d3d3",
        "width": "12em",
        "height": "50%",
        "position": "absolute",
        "margin-top": ".5em",
        "z-index": "-1"
      }), styling(".clear", {
        "clear": "both"
      }), styling(".personality-traits", {
        "width": "11.6em",
        "overflow": "hidden",
        "background-color": "#ccc",
        "position": "absolute",
        "bottom": "0px",
        "display": "inline-block",
        "z-index": 2,
        "float": "left",
        "font-weight": "100"
      }), styling(".personality.up .personality-traits", {
        "bottom": "0px"
      }), styling(".personality.down .personality-traits", {
        "top": "0px"
      }), styling(".personality-traits .inner-container", {
        "margin": ".5em",
        "position": "relative"
      }), styling(".totem-results.phone .negative-bar", {
        "display": "none"
      }), styling(".totem-results.phone", {
        "width": "13em"
      }), styling(".totem-results.phone .positive-bar", {
        "display": "none"
      }), styling(".totem-results.phone .panels-container:hover", {
        "font-weight": "100",
        "font-size": "1em",
        "position": "relative"
      }), styling(".totem-results.phone .panels-container.active", {
        "font-weight": "200",
        "font-size": "1.1em",
        "position": "relative"
      })
    ].join(""));
  };
  partials = Array();
  partial = function(name, data) {
    return partials[name](data);
  };
  partials["bar"] = function(data) {
    data.color = data.score < 0 ? "not-me" : "me";
    return div({
      style: "clear:both"
    }, "") + partial("negative-bar", data) + partial("panels-container", data) + partial("positive-bar", data);
  };
  partials["negative-bar"] = function(data) {
    var barTip, innerBar, line;
    barTip = div({
      "class": "bar-tip",
      style: "border-left: 2.5em solid #" + data.personality_type.badge.color_2 + ";"
    }, "");
    innerBar = div({
      style: "background-color:#" + data.personality_type.badge.color_2 + "; width:" + data.negativeScore + "%",
      "class": "inner"
    }, barTip);
    line = div({
      "class": "line"
    }, "");
    return div({
      "class": "negative-bar"
    }, innerBar + line);
  };
  partials["positive-bar"] = function(data) {
    var barTip, innerBar, line;
    barTip = div({
      "class": "bar-tip",
      style: "border-left: 2.5em solid #" + data.personality_type.badge.color_1 + ";"
    }, "");
    innerBar = div({
      style: "background-color:#" + data.personality_type.badge.color_1 + "; width:" + data.positiveScore + "%",
      "class": "inner"
    }, barTip);
    line = div({
      "class": "line"
    }, "");
    return div({
      "class": "positive-bar"
    }, innerBar + line);
  };
  partials["panels-container"] = function(data) {
    var name;
    name = div({
      "class": "name"
    }, data.personality_type.name);
    return div({
      "class": "panels-container"
    }, [partial("panel-left", data), partial("panel-right", data)].join("") + name);
  };
  partials["panel-left"] = function(data) {
    var badge;
    badge = image(data.personality_type.badge.image_small, {
      "class": "badge"
    });
    return div({
      "class": "left-panel",
      style: "background-color:#" + data.personality_type.badge.color_1
    }, badge);
  };
  partials["panel-right"] = function(data) {
    var score;
    score = data.score >= 0 ? Math.round(data.positiveScore) : "(" + (Math.round(data.negativeScore)) + ")";
    score = div({
      "class": "score " + data.color
    }, score);
    return div({
      "class": "right-panel",
      style: "background-color:#" + data.personality_type.badge.color_2
    }, score);
  };
  partials["trait-bar"] = function(data) {
    var color, name, score, scoreData;
    color = data.score < 0 ? "not-me" : "me";
    scoreData = data.score < 0 ? "(" + (Math.round(data.negativeScore)) + ")" : Math.round(data.positiveScore);
    name = div({
      "class": "name"
    }, data.personality_trait.name);
    score = div({
      "class": 'score'
    }, scoreData);
    return div({
      "class": "row"
    }, "" + name + score);
  };
  partials["chart"] = function(data) {
    var badge, dataDirection, key, personality_types;
    personality_types = data.personality_types;
    for (key in personality_types) {
      if (personality_types[key].score > 0) {
        personality_types[key].positiveScore = personality_types[key].score;
        personality_types[key].negativeScore = 0;
      } else {
        personality_types[key].negativeScore = Math.abs(personality_types[key].score);
        personality_types[key].positiveScore = 0;
      }
    }
    for (key in personality_types) {
      badge = personality_types[key].personality_type.badge;
      dataDirection = key < personality_types.length / 2 ? "down" : "up";
      personality_types[key] = div({
        "class": "personality " + dataDirection,
        "data-id": personality_types[key].personality_type.id,
        "data-color-1": badge.color_1,
        "data-color-2": badge.color_2,
        "data-color-3": badge.color_3
      }, partial("bar", personality_types[key]));
    }
    return personality_types.join("");
  };
  render = function(data) {
    styles = styles();
    if (options && options["styles"] === false) {
      styles = "";
    }
    return totem.html(div({
      "class": "totem-results"
    }, [partial("chart", data), styles].join("")));
  };
  totem.fetchPersonalityTraitResults = function(id) {
    return this.PersonalityResultsTraits(id);
  };
  Actions = function() {
    var animatePersonalityTraitsDiv, personalityTraitsDiv, personalityType, personalityTypes, _i, _len, _results;
    if (options && options["showTraits"] === true) {
      personalityTypes = fetch("personality");
      animatePersonalityTraitsDiv = function(personalityTraitsDiv) {
        var animateTraitsDiv, classes, fontHeight, height, hidden, scrollHeight;
        hidden = personalityTraitsDiv.style.height === "0px" ? true : false;
        height = 0;
        scrollHeight = personalityTraitsDiv.scrollHeight;
        if (hidden) {
          fontHeight = fetch("totem-results")[0].style.fontSize.replace("px", "");
          classes = personalityTraitsDiv.parentNode.parentNode.getAttribute("class");
          personalityTraitsDiv.parentNode.parentNode.setAttribute("class", classes + " active");
          return animateTraitsDiv = setInterval(function() {
            var innerHeight;
            height += 20;
            if (height < scrollHeight) {
              return personalityTraitsDiv.style.height = height / fontHeight + "em";
            } else {
              clearInterval(animateTraitsDiv);
              innerHeight = personalityTraitsDiv.getElementsByClassName("inner-container")[0].scrollHeight / fontHeight;
              return personalityTraitsDiv.style.height = (innerHeight - .1) + "em";
            }
          }, 10);
        } else {
          classes = personalityTraitsDiv.parentNode.parentNode.getAttribute("class");
          personalityTraitsDiv.parentNode.parentNode.setAttribute("class", classes.replace(" active", ""));
          return animateTraitsDiv = setInterval(function() {
            height -= 70;
            if (height > 0) {
              return personalityTraitsDiv.style.height = height + "px";
            } else {
              personalityTraitsDiv.style.height = "0px";
              return clearInterval(animateTraitsDiv);
            }
          }, 10);
        }
      };
      _results = [];
      for (_i = 0, _len = personalityTypes.length; _i < _len; _i++) {
        personalityType = personalityTypes[_i];
        personalityTraitsDiv = Object();
        _results.push(personalityType.onclick = function() {
          var animationDirection, color_1, color_2, color_3, localPersonalityType;
          localPersonalityType = this;
          color_1 = this.getAttribute("data-color-1");
          color_2 = this.getAttribute("data-color-2");
          color_3 = this.getAttribute("data-color-3");
          animationDirection = this.getAttribute("class").indexOf("down") !== -1;
          totem.PersonalityResultsTraits(this.getAttribute("data-id"), function(data) {
            var element, elements, personalityTrait, personalityTraitsContainer, _j, _k, _len1, _len2, _results1;
            personalityTraitsDiv = String();
            for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
              personalityTrait = data[_j];
              personalityTrait.color_1 = color_1;
              personalityTrait.color_2 = color_2;
              personalityTrait.color_3 = color_3;
              personalityTraitsDiv += partial("trait-bar", personalityTrait);
            }
            personalityTraitsContainer = div({
              "class": "personality-traits-container"
            }, div({
              "class": "personality-traits"
            }, div({
              "class": "inner-container"
            }, personalityTraitsDiv)));
            if (animationDirection) {
              localPersonalityType.getElementsByClassName("panels-container")[0].innerHTML += personalityTraitsContainer;
            } else {
              localPersonalityType.getElementsByClassName("panels-container")[0].innerHTML = personalityTraitsContainer + localPersonalityType.getElementsByClassName("panels-container")[0].innerHTML;
            }
            personalityTraitsDiv = localPersonalityType.getElementsByClassName("personality-traits")[0];
            personalityTraitsDiv.style.backgroundColor = "#" + color_3;
            personalityTraitsDiv.style.color = "#fff";
            personalityTraitsDiv.style.height = "0px";
            animatePersonalityTraitsDiv(personalityTraitsDiv);
            elements = totem.element.getElementsByClassName("personality-traits");
            _results1 = [];
            for (_k = 0, _len2 = elements.length; _k < _len2; _k++) {
              element = elements[_k];
              if (element !== personalityTraitsDiv && element.style.height !== "0px") {
                _results1.push(animatePersonalityTraitsDiv(element));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          });
          return this.onclick = function() {
            var animateDirection, element, elements, _j, _len1;
            elements = totem.element.getElementsByClassName("personality-traits");
            animateDirection = this.getAttribute("data-animate-direction");
            for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
              element = elements[_j];
              if (element !== this.getElementsByClassName("personality-traits")[0] && element.style.height !== "0px") {
                animatePersonalityTraitsDiv(element);
              }
            }
            return animatePersonalityTraitsDiv(this.getElementsByClassName("personality-traits")[0], animateDirection);
          };
        });
      }
      return _results;
    }
  };
  totem.PersonalityResultsTraits = function(personalityTypeId, callBack) {
    return Traitify.getPersonalityTypesTraits(assessmentId, personalityTypeId, function(personalityTraits) {
      var personalityTrait, _i, _len;
      for (_i = 0, _len = personalityTraits.length; _i < _len; _i++) {
        personalityTrait = personalityTraits[_i];
        if (personalityTrait.score < 0) {
          personalityTrait.negativeScore = Math.abs(personalityTrait.score);
          personalityTrait.positiveScore = 0;
        } else {
          personalityTrait.positiveScore = personalityTrait.score;
          personalityTrait.negativeScore = 0;
        }
      }
      return callBack(personalityTraits);
    });
  };
  this.PersonalityResults = function(callBack) {
    return Traitify.getPersonalityTypes(assessmentId, function(data) {
      data.getBadges = function() {
        if (data.personality_blend) {
          return [data.personality_blend.personality_type_1.badge, data.personality_blend.personality_type_2.badge];
        } else {
          return [data.personality_types[0].personality_type.badge];
        }
      };
      return callBack(data);
    });
  };
  this.PersonalityResults(function(data) {
    var containerWidth, oldOnResize, orientationEvent, phone, stretchSize, supportsOrientationChange, widgetParentClone, widgetParentNode;
    phone = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    stretchSize = phone ? 15 : 47.80;
    render(data);
    widgetParentNode = totem.element.parentNode;
    if (containerWidth > 10) {
      widgetParentClone = widgetParent.cloneNode(true);
      widgetParentClone.style.visibility = "hidden";
      widgetParentClone.style.display = "block";
      document.getElementsByTagName("body")[0].appendChild(widgetParentClone);
      containerWidth = widgetParentNodeClone.offsetWidth;
      fetch("totem-results")[0].style.fontSize = containerWidth / stretchSize + "px";
    } else if (widgetParentNode.offsetWidth < 568 && widgetParentNode.offsetWidth !== 0) {
      fetch("totem-results")[0].style.fontSize = widgetParentNode.offsetWidth / stretchSize + "px";
    } else if (totem.element.style.width) {
      fetch("totem-results")[0].style.fontSize = parseInt(totem.element.style.width.replace("px", "")) / stretchSize + "px";
    } else {
      fetch("totem-results")[0].style.fontSize = "16px";
    }
    if (phone) {
      fetch("totem-results")[0].className += " phone";
    }
    Actions();
    oldOnResize = window.onresize;
    window.onresize = function(event) {
      if (totem.element.parentNode.offsetWidth >= 568 && !phone) {
        return fetch("totem-results")[0].style.fontSize = "16px";
      } else {
        return fetch("totem-results")[0].style.fontSize = totem.element.parentNode.offsetWidth / stretchSize + "px";
      }
    };
    supportsOrientationChange = "onorientationchange" in window;
    orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
    return window.addEventListener(orientationEvent, (function() {
      var newWidth;
      if (phone) {
        if (oldOnResize) {
          oldOnResize.call(window, event);
        }
        newWidth = totem.element.offsetWidth / 15;
        return fetch("totem-results")[0].style.fontSize = newWidth + "px";
      }
    }), false);
  });
  return totem;
};
