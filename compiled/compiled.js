// Generated by CoffeeScript 1.8.0
var Templating, body, playedAssessment, unPlayedAssessment, widget;

this.Traitify = new (function() {
  this.host = "https://api.traitify.com";
  this.version = "v1";
  this.testMode = false;
  this.setTestMode = function(mode) {
    this.testMode = mode;
    return this;
  };
  this.setHost = function(host) {
    host = host.replace("http://", "").replace("https://", "");
    host = "https://" + host;
    this.host = host;
    return this;
  };
  this.setPublicKey = function(key) {
    this.publicKey = key;
    return this;
  };
  this.setVersion = function(version) {
    this.version = version;
    return this;
  };
  this.ajax = function(url, method, callback, params) {
    var xhr;
    url = "" + this.host + "/" + this.version + url;
    xhr = new XMLHttpRequest();
    if ("withCredentials" in xhr) {
      xhr.open(method, url, true);
    } else if (typeof XDomainRequest !== "undefined") {
      xhr = new XDomainRequest();
      xhr.open(method, url);
    } else {
      console.log("There was an error making the request.");
      xhr = null;
    }
    xhr;
    xhr.open(method, url, true);
    xhr.setRequestHeader("Authorization", "Basic " + btoa(this.publicKey + ":x"));
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.setRequestHeader("Accept", "application/json");
    xhr.onload = function() {
      var data;
      data = JSON.parse(xhr.response);
      callback(data);
      return false;
    };
    xhr.send(params);
    xhr;
    return this;
  };
  this.put = function(url, params, callback) {
    this.ajax(url, "PUT", callback, params);
    return this;
  };
  this.get = function(url, callback) {
    this.ajax(url, "GET", callback, "");
    return this;
  };
  this.getDecks = function(callBack) {
    this.get("/decks", function(data) {
      return callBack(data);
    });
    return this;
  };
  this.getSlides = function(id, callBack) {
    this.get("/assessments/" + id + "/slides", function(data) {
      return callBack(data);
    });
    return this;
  };
  this.addSlide = function(assessmentId, slideId, value, timeTaken, callBack) {
    this.put("/assessments/" + assessmentId + "/slides/" + slideId, JSON.stringify({
      "response": value,
      "time_taken": timeTaken
    }), function(data) {
      return callBack(data);
    });
    return this;
  };
  this.addSlides = function(assessmentId, values, callBack) {
    this.put("/assessments/" + assessmentId + "/slides", JSON.stringify(values), function(data) {
      return callBack(data);
    });
    return this;
  };
  this.getPersonalityTypes = function(id, callBack) {
    this.get("/assessments/" + id + "/personality_types", function(data) {
      return callBack(data);
    });
    return this;
  };
  this.getPersonalityTraits = function(id, callBack) {
    this.get("/assessments/" + id + "/personality_traits", function(data) {
      return callBack(data);
    });
    return this;
  };
  this.getPersonalityTypesTraits = function(assessmentId, personalityTypeId, callBack) {
    this.get("/assessments/" + assessmentId + "/personality_types/" + personalityTypeId + "/personality_traits", function(data) {
      return callBack(data);
    });
    return this;
  };
  this.ui = Object();
  return this;
})();

Templating = function() {
  var Builder;
  Builder = Object();
  Builder.analytics = Object();
  Builder.analytics.startTime = new Date().getTime();
  Builder.nodes = Object();
  Builder.callbacks = Object();
  Builder.query = function(query) {
    return document.querySelectorAll(query);
  };
  Builder.templates = Object();
  Builder.templates.results = function() {};
  Builder.templates.personalityTypes = function() {};
  Builder.templates.setup = function() {
    return Builder.templates.personalityTypes = Builder.query("template[name=tf-personality-types]");
  };
  Builder.helpers = Object();
  Builder.helpers.onload = function(callBack) {
    if (window.addEventListener) {
      return window.addEventListener('load', callBack);
    } else if (window.attachEvent) {
      return window.attachEvent('onload', callBack);
    }
  };
  Builder.templates.render = function(assessmentId, personalityType) {
    var oldPersonalityTypes, _i, _len, _ref;
    if (Builder.templates[personalityType]) {
      _ref = Builder.templates[personalityType];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oldPersonalityTypes = _ref[_i];
        personalityType.parentNode.removeChild(oldPersonalityTypes);
      }
    }
    Builder.templates[personalityType] = Array();
    Builder.analytics.startTypesTime = new Date().getTime();
    return Traitify.getPersonalityTypes(assessmentId, function(data) {
      var attribute, attributeValue, color_1, color_2, color_3, except, index, innerHTML, name, only, personalityTypeData, personalityTypesNode, scoreValue, types, _j, _len1, _ref1;
      Builder.analytics.endTypesTime = new Date().getTime();
      Builder.analytics.afterGettingResults = new Date().getTime();
      if (personalityType.getAttribute("hero-type")) {
        data.personality_types = data.personality_types.slice(0, 1);
      }
      if (only = personalityType.getAttribute("only-types")) {
        only = only.split(",");
        data.personality_types = data.personality_types.filter(function(tp, i) {
          return only.indexOf("" + i) !== -1;
        });
      }
      if (except = personalityType.getAttribute("except-types")) {
        types = data.personality_types;
        except = except.split(",").map(function(data) {
          return parseInt(data);
        });
        data.personality_types = data.personality_types.filter(function(tp, i) {
          return except.indexOf("" + i) === -1;
        });
      }
      for (index in data.personality_types) {
        personalityTypeData = data.personality_types[index];
        personalityTypesNode = document.createElement("div");
        color_1 = personalityTypeData.personality_type.badge.color_1;
        color_2 = personalityTypeData.personality_type.badge.color_2;
        color_3 = personalityTypeData.personality_type.badge.color_3;
        innerHTML = personalityType.innerHTML;
        if (personalityTypeData.score > 0) {
          scoreValue = Math.round(personalityTypeData.score);
        } else {
          scoreValue = "(" + (Math.abs(Math.round(personalityTypeData.score))) + ")";
        }
        innerHTML = innerHTML.replace(/{{score}}/g, scoreValue);
        innerHTML = innerHTML.replace(/{{name}}/g, personalityTypeData.personality_type.name);
        innerHTML = innerHTML.replace(/{{badge.large}}/g, personalityTypeData.personality_type.badge.image_large);
        innerHTML = innerHTML.replace(/{{badge.medium}}/g, personalityTypeData.personality_type.badge.image_medium);
        innerHTML = innerHTML.replace(/{{badge.small}}/g, personalityTypeData.personality_type.badge.image_small);
        innerHTML = innerHTML.replace(/{{color.light}}/g, color_1);
        innerHTML = innerHTML.replace(/{{color.medium}}/g, color_2);
        innerHTML = innerHTML.replace(/{{color.dark}}/g, color_3);
        innerHTML = innerHTML.replace(/{{index}}/g, index);
        innerHTML = innerHTML.replace(/{{description}}/g, personalityTypeData.personality_type.description);
        name = personalityTypeData.personality_type.name;
        innerHTML = innerHTML.replace(/{{name.lowercase}}/g, name.toLowerCase());
        innerHTML = innerHTML.replace(/{{name.camelcase}}/g, name);
        innerHTML = innerHTML.replace(/{{name.uppercase}}/g, name.toUpperCase());
        personalityTypesNode.innerHTML = innerHTML;
        personalityType.parentNode.insertBefore(personalityTypesNode, personalityType);
        Builder.templates[personalityType].push(personalityTypesNode);
        _ref1 = personalityType.attributes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          attribute = _ref1[_j];
          if (attribute.name !== "name") {
            attributeValue = attribute.value;
            attributeValue = attributeValue.replace(/{{color.light}}/g, color_1);
            attributeValue = attributeValue.replace(/{{color.medium}}/g, color_2);
            attributeValue = attributeValue.replace(/{{color.dark}}/g, color_3);
            personalityTypesNode.setAttribute(attribute.name, attributeValue);
          }
        }
      }
      return Builder.analytics.endTime = new Date().getTime();
    });
  };
  Builder.bindings = Object();
  Builder.bindings.personalityTypes = function() {
    var assessmentId, personalityType, _i, _len, _ref, _results;
    _ref = Builder.templates.personalityTypes;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      personalityType = _ref[_i];
      assessmentId = personalityType.getAttribute("assessment-id");
      if (assessmentId) {
        _results.push(Builder.templates.render(assessmentId, personalityType));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  Builder.bindings.names = function(personalityType, names) {
    var name, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      _results.push(name.innerHTML = personalityType.personality_type.name);
    }
    return _results;
  };
  Builder.bindings.badges = function(personalityType, badges) {
    var badge, image, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = badges.length; _i < _len; _i++) {
      badge = badges[_i];
      image = document.createElement("img");
      image.src = personalityType.personality_type.badge.image_large;
      image.style.width = "100%";
      _results.push(badge.appendChild(image));
    }
    return _results;
  };
  Builder.bindings.scores = function(personalityType, scores) {
    var score, scoreValue, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = scores.length; _i < _len; _i++) {
      score = scores[_i];
      if (personalityType.score > 0) {
        scoreValue = Math.round(personalityType.score);
      } else {
        scoreValue = "(" + (Math.abs(Math.round(personalityType.score))) + ")";
      }
      _results.push(score.innerHTML = scoreValue);
    }
    return _results;
  };
  Builder.initialize = function() {
    Builder.templates.setup();
    Builder.bindings.personalityTypes();
    return Builder;
  };
  if (Builder.callbacks.initialized) {
    Builder.callbacks.initialized();
  } else {
    Builder.initialized = true;
  }
  Builder.autoInitialize = function() {
    return Builder.helpers.onload(function() {
      return Builder.initialize();
    });
  };
  Builder.callbacks = Object();
  Builder.onInitialize = function(callBack) {
    if (Builder.initialized === true) {
      callBack();
    }
    return Builder.callbacks.initialized = callBack;
  };
  return Builder;
};

window.Traitify.templating = Templating();

unPlayedAssessment = "unplayed";

unPlayedAssessment = "played";

QUnit.test("API Client Set Host", function(assert) {
  Traitify.setHost("hi");
  assert.equal(Traitify.host, "https://hi", "Setting Host Succeeds!");
  Traitify.setHost("https://new_hi");
  assert.equal(Traitify.host, "https://new_hi", "Setting Host with https Succeeds!");
  Traitify.setHost("http://new_hi_with_https");
  return assert.equal(Traitify.host, "https://new_hi_with_https", "Setting Host with http is changed for https Succeeds!");
});

QUnit.test("API Client Set Version", function(assert) {
  Traitify.setVersion("v2");
  return assert.equal(Traitify.version, "v2", "Setting Version");
});

QUnit.test("API Client Set Public Key", function(assert) {
  Traitify.setPublicKey("here-is-the-key");
  return assert.equal(Traitify.publicKey, "here-is-the-key", "Setting public key Succeeds!");
});

QUnit.module("Testing API Version 1", {
  setup: function() {
    Traitify.setVersion("v1");
    Traitify.setHost("api-sandbox.traitify.com");
    return Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
  }
});

QUnit.test("API Client Get Slides", function(assert) {
  return Traitify.getSlides(unPlayedAssessment, function(slides) {
    assert.equal(slides.length, 84, "Returns 84 slides");
    return assert.equal(slides[0].caption, "Navigating", "Checking that The Caption of The First Slide Succeeds!");
  });
});

QUnit.test("API Client Get Decks", function(assert) {
  return Traitify.getDecks(function(decks) {
    return assert.equal(decks[0].name, "Career Deck", "Checking that The First Deck Succeeds!");
  });
});

QUnit.test("API Client Add Slide", function(assert) {
  return Traitify.addSlide(unPlayedAssessment, 0, true, 1000, function(response) {
    return assert.equal(response, "", "Checking that The First Deck Succeeds!");
  });
});

QUnit.test("API Client Add Slides", function(assert) {
  return Traitify.addSlides(unPlayedAssessment, [
    {
      id: 0,
      response: true,
      response_time: 1000
    }
  ], function(response) {
    return assert.equal(response, "", "Checking that The First Deck Succeeds!");
  });
});

window.mocker = Object();

window.XMLHttpRequest = function() {
  this.open = function(method, url) {
    this.requestMethod = method;
    return this.requestUrl = url;
  };
  this.send = function(params) {
    var byMethodAndUrl, err;
    try {
      byMethodAndUrl = window.mocker.mocks[this.requestMethod][this.requestUrl];
      if (!params) {
        params = JSON.stringify(Object());
      }
      this.response = byMethodAndUrl[params];
      return this.onload();
    } catch (_error) {
      err = _error;
      return console.log("" + this.requestMethod + " with url " + this.requestUrl + " and " + params + " is not mocked");
    }
  };
  this.headers = Object();
  this.setRequestHeader = function(key, value) {
    return this.headers[key] = value;
  };
  this.withCredentials = function() {
    return Object();
  };
  return this;
};

window.XDomainRequest = window.XMLHttpRequest;

window.mocker.mocks = Object();

window.mocker.mock = function(method, url, params, data) {
  if (typeof window.mocker.mocks[method] === "undefined") {
    window.mocker.mocks[method] = Object();
  }
  if (typeof window.mocker.mocks[method][url] === "undefined") {
    window.mocker.mocks[method][url] = Object();
    return window.mocker.mocks[method][url][params] = JSON.stringify(data);
  }
};

unPlayedAssessment = "unplayed";

playedAssessment = "played";

body = document.getElementsByTagName("body")[0];

body.innerHTML = body.innerHTML + "<div class='widget' style='display:none'></div>";

QUnit.test("Slide Deck Hooks Exist", function(assert) {
  var Builder;
  Traitify.setVersion("v1");
  Traitify.setHost("api-sandbox.traitify.com");
  Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
  document.getElementsByClassName("widget")[0].innerHTML = "";
  Builder = Traitify.ui.slideDeck(unPlayedAssessment, ".widget", Object());
  assert.equal(!Builder.onInitialize, false, "on Initialize Event Succeeds!");
  assert.equal(!Builder.onMe, false, "on Me Event Succeeds!");
  assert.equal(!Builder.onNotMe, false, "on Not Me Event Succeeds!");
  assert.equal(!Builder.onAddSlide, false, "on Add Slide Event Succeeds!");
  assert.equal(!Builder.onFinish, false, "on Finish Event Succeeds!");
  return assert.equal(!Builder.onAdvanceSlide, false, "on Advance Slide Event Succeeds!");
});

QUnit.module("Testing API Version 1", {
  setup: function() {
    Traitify.setVersion("v1");
    Traitify.setHost("api-sandbox.traitify.com");
    Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
    return document.getElementsByClassName("widget")[0].innerHTML = "";
  }
});

QUnit.asyncTest("Slide Deck Widget Initialize", function(assert) {
  var Builder;
  Builder = Traitify.ui.slideDeck(unPlayedAssessment, ".widget", Object());
  return Builder.onInitialize(function() {
    var builderNodeNames, firstSlide;
    assert.equal(Builder.data.slides[0].caption, "Navigating", "First Slide Caption Succeeds!");
    firstSlide = Builder.nodes.currentSlide.getElementsByClassName("caption")[0].innerHTML;
    assert.equal(firstSlide, "Navigating", "First Slide is on DOM Succeeds!");
    builderNodeNames = ["main", "progressBar", "progressBarInner", "currentSlide", "nextSlide", "slides", "me", "notMe", "meNotMeContainer"];
    assert.equal(JSON.stringify(Object.keys(Builder.nodes)), JSON.stringify(builderNodeNames), "Node Names append to Builder Succeeds!");
    return QUnit.start();
  });
});

QUnit.test("Slide Deck Widget Appears on Screen", function(assert) {
  var Builder;
  Builder = Traitify.ui.slideDeck(unPlayedAssessment, ".widget", Object());
  return assert.equal(!document.getElementsByClassName("slide active")[0], false, "on Initialize Event Succeeds!");
});

QUnit.asyncTest("Results Widget Appears on Screen", function(assert) {
  var Builder;
  assert.equal(!document.getElementsByClassName("personality-types")[0], true, "Personality types container exists");
  Builder = Traitify.ui.slideDeck(playedAssessment, ".widget", Object());
  return Builder.results.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("personality-types")[0], false, "Personality types container exists");
    assert.equal(!document.getElementsByClassName("print-button")[0], false, "Print button exists");
    return QUnit.start();
  });
});

QUnit.asyncTest("Results Widget Shows Traits When Requested", function(assert) {
  var Builder;
  assert.equal(!document.getElementsByClassName("personality-types")[0], true, "Personality types container exists");
  Builder = Traitify.ui.slideDeck(playedAssessment, ".widget", {
    traits: true
  });
  return Builder.results.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("toggle-traits")[0], false, "Personality types container exists");
    return QUnit.start();
  });
});

QUnit.asyncTest("Results Widget Does Not Show Traits View Upon Request", function(assert) {
  var Builder;
  assert.equal(!document.getElementsByClassName("personality-types")[0], true, "Personality types container exists");
  Builder = Traitify.ui.slideDeck(playedAssessment, ".widget");
  return Builder.results.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("toggle-traits")[0], true, "Personality types container exists");
    return QUnit.start();
  });
});

widget = Object();

QUnit.module("Testing API Version 1", {
  setup: function() {
    Traitify.setVersion("v1");
    Traitify.setHost("api-sandbox.traitify.com");
    Traitify.setPublicKey("gglvv58easpesg9ajbltavb3gr");
    document.getElementsByClassName("widget")[0].innerHTML = "";
    widget = document.getElementsByClassName("widget")[0];
    if (!widget) {
      widget = document.createElement("div");
      body = document.getElementsByTagName("body")[0];
      body.appendChild(widget);
    }
    return widget.innerHTML = '<template name="tf-personality-types" assessment-id="played"> <name></name> </template>';
  }
});

QUnit.asyncTest("Slide Deck Widget Initialize", function(assert) {
  Traitify.templating.initialize();
  return Traitify.templating.onInitialize(function() {
    assert.equal(!document.getElementsByClassName("widget")[0], false, "template exists");
    assert.equal(document.getElementsByTagName("name")[0].innerHTML, "Navigating", "template exists");
    return QUnit.start();
  });
});

window.Traitify.ui.slideDeck = function(assessmentId, selector, slideDeckCallBack) {
  var Actions, classes, data, div, fetch, html, image, ipad, link, media, orientation, partial, partials, phoneSetup, slideDeck, slideLock, style, styles, styling, tag;
  slideLock = false;
  orientation = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  ipad = /iPad/.test(navigator.userAgent);
  slideDeck = Object();
  if (!this.host) {
    this.host = "https://api-staging.traitify.com";
  }

  /*
  HELPERS
   */
  tag = function(type, attributes, content) {
    var key, preparedAttributes, value;
    preparedAttributes = Array();
    for (key in attributes) {
      value = attributes[key];
      preparedAttributes.push(key + "=\"" + value + "\"");
    }
    attributes = attributes || Array();
    if (content === false) {
      return "<" + type + " " + preparedAttributes.join(" ") + " />";
    } else {
      return "<" + type + " " + preparedAttributes.join(" ") + ">\n" + content + "\n</" + type + ">";
    }
  };
  div = function(attributes, content) {
    return tag("div", attributes, content);
  };
  image = function(src, attributes) {
    attributes["src"] = src;
    return tag("img", attributes, false);
  };
  link = function(href, attributes, content) {
    attributes["href"] = href;
    return tag("a", attributes, content);
  };
  style = function(content) {
    return tag("style", {}, content);
  };
  styling = function(selector, content) {
    var formattedContent, key;
    formattedContent = Array();
    for (key in content) {
      formattedContent.push(key + ":" + content[key] + ";");
    }
    if (selector.indexOf('&') !== -1) {
      selector = slideDeck.classes() + selector.replace("&", "");
    } else {
      selector = slideDeck.classes() + " " + selector;
    }
    return selector + "{\n" + formattedContent.join("\n") + "}";
  };
  media = function(arg, content) {
    var i;
    for (i in arg) {
      arg = i + ":" + arg[i];
    }
    return "@media screen and (" + arg + ")";
  };
  fetch = function(className) {
    return slideDeck.element.getElementsByClassName(className);
  };

  /*
  MAIN
   */

  /*
  Styles
   */
  styles = function() {
    var slideHeight;
    slideHeight = orientation ? "40em" : "22.5em";
    styles = Array();
    styles.push(styling("", {
      "font-family": '"Helvetica Neue", Helvetica,Arial, sans-serif',
      "text-align": "center",
      "margin": "1em"
    }));
    styles.push(styling(".slide-deck", {
      "text-align": "center",
      "margin": "0px auto",
      "display": "inline-block",
      "background-color": "transparent",
      "min-width": "40em"
    }));
    styles.push(styling(".slide .image", {
      width: "40em",
      height: slideHeight,
      "line-height": "1em"
    }));
    styles.push(styling(".slide .caption", {
      "text-align": "center",
      "background-color": "#1b1b1b",
      color: "#fff",
      padding: ".8em 0px"
    }));
    styles.push(styling(".slide", {
      display: "inline-block"
    }));
    styles.push(styling(".slide-container", {
      width: "40em",
      overflow: "hidden",
      position: "relative",
      display: "inline-block",
      "vertical-align": "middle",
      "float": "left"
    }));
    styles.push(styling(".me", {
      width: "50%",
      display: "inline-block",
      padding: "1em 0em",
      "text-align": "center",
      color: "#fff",
      "text-decoration": "none"
    }));
    styles.push(styling(".not-me", {
      width: "50%",
      display: "inline-block",
      padding: "1em 0em",
      "text-align": "center",
      color: "#fff",
      "text-decoration": "none"
    }));
    styles.push(styling(".me:hover", {
      "text-decoration": "none",
      color: "#fff"
    }));
    styles.push(styling(".not-me:hover", {
      "text-decoration": "none",
      color: "#fff"
    }));
    styles.push(styling(".me", {
      "background-color": "#3f6fef"
    }));
    styles.push(styling(".not-me", {
      "background-color": "#ef3f2f"
    }));
    styles.push(styling(".slides", {
      display: "inline-block",
      "text-align": "left",
      width: (slideDeck.fetch("slide").length * 40) + "em"
    }));
    styles.push(styling(".progress-bar", {
      "height": ".5em",
      "width": "40em",
      "font-size": "inherit",
      "display": "inline-block",
      "background-color": "#f0f0f0",
      "overflow": "hidden",
      "text-align": "left",
      "transition": "none",
      "-webkit-transition": "none"
    }));
    styles.push(styling(".inner-progress-bar", {
      "height": ".5em",
      "width": "0%",
      "display": "inline-block",
      "background-color": "#888",
      "float": "left"
    }));
    styles.push(styling(".me.side", {
      "position": "relative",
      "width": "3.6em",
      "height": "16.1em",
      "float": "left",
      "margin-top": ".4em",
      "display": "none"
    }));
    styles.push(styling(".not-me.side", {
      "position": "relati ve",
      "width": "3.6em",
      "height": "16.1em",
      "float": "left",
      "margin-top": ".4em",
      "display": "none",
      "text-align": "center"
    }));
    styles.push(styling(".me.side .text", {
      "margin-top": "6em"
    }));
    styles.push(styling(".not-me.side .text", {
      "margin-top": "5.7em"
    }));
    styles.push(styling("&.phone .me.bottom", {
      "display": "inline-block"
    }));
    styles.push(styling("&.phone .not-me.bottom", {
      "display": "inline-block"
    }));
    styles.push(styling("&.phone .me.side", {
      "display": "none"
    }));
    styles.push(styling("&.phone .not-me.side", {
      "display": "none"
    }));
    styles.push(styling("&.phone .slide .caption", {
      "font-size": "1.6em"
    }));
    styles.push(styling("&.phone .me.bottom", {
      "font-size": "1.6em"
    }));
    styles.push(styling("&.phone .not-me.bottom", {
      "font-size": "1.6em"
    }));
    styles.push(styling("&.phone.rotated .me.side", {
      "display": "inline-block"
    }));
    styles.push(styling("&.phone.rotated .not-me.side", {
      "display": "inline-block"
    }));
    styles.push(styling("&.phone.rotated .me.bottom", {
      "display": "none"
    }));
    styles.push(styling("&.phone.rotated .not-me.bottom", {
      "display": "none"
    }));
    styles.push(styling("&.phone.rotated .progress-bar", {
      "width": "16.5em",
      "height": ".4em",
      "background-color": "#cfcfcf",
      "border-radius": "0em"
    }));
    styles.push(styling("&.phone.rotated .slide", {
      "width": "16.5em",
      "height": "16.5em"
    }));
    styles.push(styling("&.phone.rotated .slide-container", {
      "width": "16.5em",
      "height": "16.5em"
    }));
    styles.push(styling("&.phone.rotated .slide img", {
      "width": "16.5em",
      "height": "16.5em"
    }));
    styles.push(styling("&.phone.rotated .slide .caption", {
      "width": "16.5em",
      "font-size": "1em",
      "padding": ".2em"
    }));
    styles.push(styling("&.phone.rotated .slide-deck", {
      "width": "26em",
      "height": "18.5em",
      "margin": "0px auto"
    }));
    styles.push(styling("&.ipad", {
      "font-weight": "100"
    }));
    styles.push(styling("&.ipad.rotated .slide-deck", {
      "font-size": "1.6em"
    }));
    styles.push(styling("& .spinner", {
      "margin-left": "auto",
      "margin-right": "auto",
      "width": "6em",
      "margin-top": "10em"
    }));
    return style(styles.join(""));
  };

  /*
  Views
   */
  partial = function(partialName, args) {
    return partials[partialName](args);
  };

  /*
  CONTROLLER
   */
  slideDeck.setProgressBar = function() {
    var slidesPlayed;
    slidesPlayed = slideDeck.fetch("slide").length / slideDeck.totalSlides;
    return slideDeck.fetch("inner-progress-bar")[0].style.width = (100 - (slidesPlayed * 100)) + "%";
  };
  slideDeck.lastAnimation = function() {
    slideDeck.fetch("slide-deck")[0].style.height = slideDeck.element.scrollHeight + "px";
    slideDeck.fetch("slide-deck")[0].innerHTML = partial("waiting-container");
    return false;
  };

  /*
  Events
   */
  Actions = function() {
    var addSlide, addSlideTimer, advanceSlide, me, mes, notMe, notMes, oldOnResize, _i, _j, _len, _len1;
    slideDeck.slideLength = slideDeck.fetch("slide").length;
    addSlideTimer = new Date();
    addSlide = function(value) {
      var slideId, slideTime;
      slideTime = new Date() - addSlideTimer;
      slideId = slideDeck.currentSlide.getAttribute("data-id");
      slideDeck.setProgressBar();
      return Traitify.addSlide(assessmentId, slideId, value, slideTime, function() {
        slideDeck.slideLength -= 1;
        if (slideDeck.slideLength === 0) {
          slideDeckCallBack();
        }
        return addSlideTimer = new Date();
      });
    };
    advanceSlide = function() {
      var ease, left, slideLeftAnimation, width;
      left = -10;
      ease = 20;
      width = slideDeck.currentSlide.offsetWidth;
      slideLeftAnimation = setInterval(function() {
        var slide;
        if (left > -(width / 2) + 30) {
          ease = ease * 1.2;
        } else {
          if (left < -(width / 2) - 30) {
            ease = ease / 1.17;
          }
        }
        left = left - ease;
        slideDeck.currentSlide.style["margin-left"] = left + "px";
        if (left < -width) {
          slide = slideDeck.currentSlide;
          slideDeck.fetch("slides")[0].removeChild(slideDeck.currentSlide);
          slideDeck.currentSlide = slideDeck.fetch("slide")[0];
          slideLock = false;
          clearInterval(slideLeftAnimation);
        }
      }, 40);
      return false;
    };
    slideDeck.currentSlide = slideDeck.fetch("slide")[0];
    slideLock = false;
    mes = slideDeck.fetch("me");
    for (_i = 0, _len = mes.length; _i < _len; _i++) {
      me = mes[_i];
      me.onclick = function(event) {
        if (!slideLock) {
          slideLock = true;
          addSlide("true");
          if (slideDeck.slideLength !== 1) {
            advanceSlide();
          } else {
            slideDeck.fetch("inner-progress-bar")[0].style.width = "100%";
            slideDeck.lastAnimation();
          }
        }
        if (event.preventDefault) {
          return event.preventDefault();
        } else {
          return event.returnValue = false;
        }
      };
    }
    slideDeck.resizeToFit = function() {
      var cln, itm, widthOfContainer;
      widthOfContainer = slideDeck.element.offsetWidth;
      if (slideDeck.element.offsetWidth === 0) {
        itm = slideDeck.element;
        cln = itm.cloneNode(true);
        while (cln.firstChild) {
          cln.removeChild(cln.firstChild);
        }
        cln.style.visibility = "hidden";
        document.body.appendChild(cln);
        widthOfContainer = cln.offsetWidth;
        document.body.removeChild(cln);
      }
      return slideDeck.element.style.fontSize = widthOfContainer / 42 + "px";
    };
    slideDeck.resizeToFit();
    oldOnResize = window.onresize;
    window.onresize = function(event) {
      slideDeck.resizeToFit();
      if (oldOnResize) {
        oldOnResize.call(window, event);
      }
    };
    notMes = slideDeck.fetch("not-me");
    for (_j = 0, _len1 = notMes.length; _j < _len1; _j++) {
      notMe = notMes[_j];
      notMe.onclick = function(event) {
        if (!slideLock) {
          slideLock = true;
          addSlide("false");
          if (slideDeck.slideLength !== 1) {
            advanceSlide();
          } else {
            slideDeck.fetch("inner-progress-bar")[0].style.width = "100%";
            slideDeck.lastAnimation();
          }
        }
        if (event.preventDefault) {
          return event.preventDefault();
        } else {
          return event.returnValue = false;
        }
      };
    }
  };
  phoneSetup = function() {
    var classes, orientationEvent, setSlideDeckOrientation, supportsOrientationChange;
    supportsOrientationChange = "onorientationchange" in window;
    orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
    if (orientation) {
      classes = slideDeck.element.getAttribute("class") + (ipad ? " ipad" : "");
      slideDeck.element.setAttribute("class", classes + " phone");
    }
    window.addEventListener(orientationEvent, (function() {
      return setSlideDeckOrientation();
    }));
    setSlideDeckOrientation = function() {
      var captions, textSize;
      textSize = "1.2em";
      if (orientation) {
        if (window.orientation !== 0) {
          classes = slideDeck.element.getAttribute("class");
          slideDeck.element.setAttribute("class", classes + " rotated");
        } else {
          classes = slideDeck.element.getAttribute("class");
          slideDeck.element.setAttribute("class", classes.replace(" rotated", ""));
        }
        return captions = slideDeck.fetch("caption");
      }
    };
    return setSlideDeckOrientation();
  };
  selector = (selector ? selector : this.selector);
  if (selector.indexOf("#") !== -1) {
    slideDeck.element = document.getElementById(selector.replace("#", ""));
  } else {
    slideDeck.element = document.getElementsByClassName(selector.replace(".", ""))[0];
  }
  slideDeck.retina = window.devicePixelRatio > 1;
  data = function(attr) {
    return this.element.getAttribute("data-" + attr);
  };
  html = function(setter) {
    if (setter) {
      slideDeck.element.innerHTML = setter;
    }
    return slideDeck.element.innerHTML;
  };
  classes = function() {
    var key;
    classes = slideDeck.element.className.split(" ");
    for (key in classes) {
      classes[key] = "." + classes[key];
    }
    return classes.join("");
  };
  slideDeck.a = link;
  slideDeck.div = div;
  slideDeck.image = image;
  slideDeck.fetch = fetch;
  slideDeck.data = data;
  slideDeck.html = html;
  slideDeck.classes = classes;
  slideDeck.slidesUrl = function() {
    return slideDeck.host + "/v1/assessments/" + assessmentId + "/slides";
  };
  partials = Array();
  partials["slide"] = function(args) {
    var caption, id, imageUrl;
    caption = args.caption;
    imageUrl = args.imageUrl;
    id = args.id;
    return div({
      "class": "slide",
      "data-id": id
    }, [
      div({
        "class": "caption"
      }, caption), image(imageUrl, {
        "class": "image"
      }, imageUrl)
    ].join(""));
  };
  partials["slides"] = function(data) {
    var imageSrc, key, slides;
    slides = Array();
    for (key in data) {
      if (orientation) {
        imageSrc = data[key]["image_phone_landscape"];
      } else {
        imageSrc = data[key]["image_desktop"];
      }
      if (data[key].completed_at === null) {
        slides.push(partial("slide", {
          caption: data[key]["caption"],
          imageUrl: imageSrc,
          id: data[key].id
        }));
      }
    }
    slides = slides.join("");
    return div({
      "class": "slides"
    }, slides);
  };
  partials["me-not-me"] = function() {
    return link("#", {
      "class": "me bottom"
    }, "Me") + link("#", {
      "class": "not-me bottom"
    }, "Not Me");
  };
  partials["slide-container"] = function(data) {
    var progressBar, slideContainer;
    progressBar = div({
      "class": "progress-bar"
    }, div({
      "class": "inner-progress-bar"
    }, ""));
    slideContainer = div({
      "class": "slide-container"
    }, progressBar + partial("slides", data) + partial("me-not-me"));
    return link("#", {
      "class": "me side"
    }, div({
      "class": "text"
    }, "Me")) + slideContainer + link("#", {
      "class": "not-me side"
    }, div({
      "class": "text"
    }, "Not<br />Me")) + div({
      style: "clear:both"
    }, "");
  };
  partials["waiting-container"] = function() {
    return "<img src='https://s3.amazonaws.com/traitify-cdn/images/spinners/blue_dot.gif' class='spinner' />";
  };
  Traitify.getSlides(assessmentId, function(data) {
    var slides;
    slideDeck.totalSlides = data.length;
    slides = partial("slide-container", data);
    slideDeck.html(div({
      "class": "slide-deck"
    }, slides));
    slideDeck.html(slideDeck.html() + styles());
    Actions();
    phoneSetup();
    slideDeck.setProgressBar();
  });
  return this;
};

Traitify.ui.slideDeck = function(assessmentId, selector, options) {
  var Builder, selectedObject, touched;
  Builder = Object();
  Builder.nodes = Object();
  Builder.states = Object();
  Builder.states.animating = false;
  Builder.data = Object();
  Builder.data.slideResponses = Object();
  Builder.states.finished = false;
  if (typeof options === "undefined") {
    options = Object();
  }
  if (navigator.userAgent.match(/iPad/i)) {
    Builder.device = "ipad";
  }
  if (navigator.userAgent.match(/iPhone/i)) {
    Builder.device = "iphone";
  }
  if (navigator.userAgent.match(/Android/i)) {
    Builder.device = "android";
  }
  if (navigator.userAgent.match(/BlackBerry/i)) {
    Builder.device = "blackberry";
  }
  if (navigator.userAgent.match(/webOS/i)) {
    Builder.device = "webos";
  }
  if (typeof selector !== "string") {
    Builder.nodes.main = document.createElement("div");
    document.getElementsByTagName("body")[0].appendChild(Builder.nodes.main);
  } else if (selector.indexOf("#") !== -1) {
    selector = selector.replace("#", "");
    Builder.nodes.main = document.getElementById(selector);
  } else {
    selector = selector.replace(".", "");
    selectedObject = document.getElementsByClassName(selector);
    Builder.nodes.main = selectedObject ? selectedObject[0] : null;
  }
  if (!Builder.nodes.main) {
    console.log("YOU MUST HAVE A TAG WITH A SELECTOR FOR THIS TO WORK");
    return false;
  }
  Builder.classes = function() {
    var classes, key;
    classes = Builder.main.className.split(" ");
    for (key in classes) {
      classes[key] = "." + classes[key];
    }
    return classes.join("");
  };
  Builder.data.slidesLeft = function() {
    return Builder.data.slides.length - Builder.data.currentSlide;
  };
  Builder.data.slideValues = Array();
  Builder.data.addSlide = function(id, value) {
    Builder.data.lastSlideTime = Builder.data.currentSlideTime;
    Builder.data.currentSlideTime = new Date().getTime();
    Builder.data.slideValues.push({
      id: id,
      response: value,
      time_taken: Builder.data.currentSlideTime - Builder.data.lastSlideTime
    });
    Builder.data.sentSlides += 1;
    if (Builder.data.slideValues.length % 10 === 0 || Builder.data.sentSlides === Builder.data.slidesToPlayLength) {
      return Traitify.addSlides(assessmentId, Builder.data.slideValues, function(response) {
        if (Builder.callbacks.addSlide) {
          Builder.callbacks.addSlide(Builder);
        }
        if (Builder.data.sentSlides === Builder.data.slidesToPlayLength) {
          Builder.nodes.main.innerHTML = "";
          if (options.showResults !== false) {
            Traitify.ui.resultsDefault(assessmentId, selector, options);
          }
          if (Builder.callbacks.finished) {
            return Builder.callbacks.finished(Builder);
          }
        }
      });
    }
  };
  Builder.partials = Object();
  Builder.partials.make = function(elementType, attributes) {
    var attributeName, element;
    element = document.createElement(elementType);
    for (attributeName in attributes) {
      element.setAttribute(attributeName, attributes[attributeName]);
    }
    return element;
  };
  Builder.partials.div = function(attributes) {
    return this.make("div", attributes);
  };
  Builder.partials.img = function(attributes) {
    return this.make("img", attributes);
  };
  Builder.partials.i = function(attributes) {
    return this.make("i", attributes);
  };
  Builder.data.getProgressBarNumbers = function(initialize) {
    var currentLength, currentPosition, slideLength, value;
    slideLength = Builder.data.totalSlideLength;
    currentLength = Builder.data.slides.length;
    currentPosition = Builder.data.sentSlides;
    if (initialize !== "initializing") {
      currentPosition += 1;
    }
    value = slideLength - currentLength + currentPosition;
    return (value / Builder.data.totalSlideLength) * 100;
  };
  Builder.partials.slideDeckContainer = function() {
    var cover, slidesContainer, slidesLeft;
    slidesContainer = this.div({
      "class": "tf-slide-deck-container"
    });
    cover = this.div({
      "class": "cover"
    });
    cover.innerHTML = "Landscape mode is not currently supported";
    slidesContainer.appendChild(cover);
    slidesLeft = Builder.data.getProgressBarNumbers("initializing");
    slidesContainer.appendChild(Builder.partials.progressBar(slidesLeft));
    slidesContainer.appendChild(this.slides(Builder.data.slides));
    slidesContainer.appendChild(this.meNotMe());
    return slidesContainer;
  };
  Builder.partials.meNotMe = function() {
    var meNotMeContainer;
    meNotMeContainer = this.div({
      "class": "me-not-me-container"
    });
    Builder.nodes.me = this.div({
      "class": "me"
    });
    Builder.nodes.notMe = this.div({
      "class": "not-me"
    });
    Builder.nodes.notMe.innerHTML = "Not Me";
    Builder.nodes.me.innerHTML = "Me";
    meNotMeContainer.appendChild(Builder.nodes.me);
    meNotMeContainer.appendChild(Builder.nodes.notMe);
    Builder.nodes.meNotMeContainer = meNotMeContainer;
    return meNotMeContainer;
  };
  Builder.partials.slides = function(slidesData) {
    var placeHolderSlide, slides;
    slides = this.div({
      "class": "slides"
    });
    placeHolderSlide = Builder.partials.slide(slidesData[0]);
    placeHolderSlide.className += " placeholder";
    slides.appendChild(placeHolderSlide);
    Builder.nodes.currentSlide = Builder.partials.slide(slidesData[0]);
    Builder.nodes.currentSlide.className += " active";
    slides.appendChild(Builder.nodes.currentSlide);
    if (slidesData[1]) {
      Builder.nodes.nextSlide = Builder.partials.slide(slidesData[1]);
      slides.appendChild(Builder.nodes.nextSlide);
    } else {
      Builder.nodes.nextSlide = false;
    }
    Builder.nodes.slides = slides;
    return slides;
  };
  Builder.partials.slide = function(slideData) {
    var slide, slideCaption, slideImg;
    slide = this.div({
      "class": "slide"
    });
    slideCaption = this.div({
      "class": "caption"
    });
    slideCaption.innerHTML = slideData.caption;
    if (Builder.device) {
      slideImg = this.div({
        style: "background-image:url('" + slideData.image_desktop_retina + "'); background-position:" + slideData.focus_x + "% " + slideData.focus_y + "%;'",
        "class": "image"
      });
      slideImg.appendChild(slideCaption);
    } else {
      slideImg = this.img({
        src: slideData.image_desktop_retina
      });
      slide.appendChild(slideCaption);
    }
    slide.appendChild(slideImg);
    return slide;
  };
  Builder.partials.progressBar = function(percentFinished) {
    var progressBar, progressBarInner;
    progressBar = this.div({
      "class": "progress-bar"
    });
    progressBarInner = this.div({
      "class": "progress-bar-inner"
    });
    progressBarInner.style.width = percentFinished + "%";
    progressBar.appendChild(progressBarInner);
    Builder.nodes.progressBar = progressBar;
    Builder.nodes.progressBarInner = progressBarInner;
    return progressBar;
  };
  Builder.partials.loadingAnimation = function() {
    var leftDot, loadingContainer, loadingSymbol, rightDot;
    loadingContainer = this.div({
      "class": "loading"
    });
    leftDot = this.i(Object());
    rightDot = this.i(Object());
    loadingSymbol = this.div({
      "class": "symbol"
    });
    loadingSymbol.appendChild(leftDot);
    loadingSymbol.appendChild(rightDot);
    loadingContainer.appendChild(loadingSymbol);
    return loadingContainer;
  };
  Builder.helpers = Object();
  touched = Object();
  Builder.helpers.touch = function(touchNode, callBack) {
    touchNode.addEventListener('touchstart', function(event) {
      var touchobj;
      touchobj = event.changedTouches[0];
      touched.startx = parseInt(touchobj.clientX);
      return touched.starty = parseInt(touchobj.clientY);
    });
    return touchNode.addEventListener('touchend', function(event) {
      var touchDifferenceX, touchDifferenceY, touchobj;
      touchobj = event.changedTouches[0];
      touchDifferenceX = Math.abs(touched.startx - parseInt(touchobj.clientX));
      touchDifferenceY = Math.abs(touched.starty - parseInt(touchobj.clientY));
      if (touchDifferenceX < 2 && touchDifferenceX < 2) {
        return callBack();
      }
    });
  };
  Builder.helpers.onload = function(callBack) {
    if (window.addEventListener) {
      return window.addEventListener('load', callBack);
    } else if (window.attachEvent) {
      return window.attachEvent('onload', callBack);
    }
  };
  Builder.actions = function() {
    if (Builder.device === "iphone" || Builder.device === "ipad") {
      Builder.helpers.touch(Builder.nodes.notMe, function() {
        return Builder.events.notMe();
      });
      return Builder.helpers.touch(Builder.nodes.me, function() {
        return Builder.events.me();
      });
    } else {
      Builder.nodes.notMe.onclick = function() {
        return Builder.events.notMe();
      };
      return Builder.nodes.me.onclick = function() {
        return Builder.events.me();
      };
    }
  };
  Builder.events = Object();
  Builder.events.me = function() {
    var currentSlide;
    if (!Builder.states.animating && !Builder.data.slidesLeft() !== 1) {
      if (!Builder.data.slides[Builder.data.currentSlide]) {
        Builder.events.loadingAnimation();
      }
      Builder.states.animating = true;
      Builder.events.advanceSlide();
      currentSlide = Builder.data.slides[Builder.data.currentSlide - 1];
      Builder.data.addSlide(currentSlide.id, true);
      Builder.data.currentSlide += 1;
      if (Builder.callbacks.me) {
        return Builder.callbacks.me(Builder);
      }
    }
  };
  Builder.events.notMe = function() {
    var currentSlide;
    if (!Builder.states.animating && Builder.nodes.nextSlide) {
      if (!Builder.data.slides[Builder.data.currentSlide]) {
        Builder.events.loadingAnimation();
      }
      Builder.states.animating = true;
      Builder.events.advanceSlide();
      currentSlide = Builder.data.slides[Builder.data.currentSlide - 1];
      Builder.data.addSlide(currentSlide.id, false);
      Builder.data.currentSlide += 1;
      if (Builder.callbacks.notMe) {
        return Builder.callbacks.notMe(Builder);
      }
    }
  };
  Builder.events.advanceSlide = function() {
    var nextSlideData;
    Builder.prefetchSlides();
    Builder.nodes.progressBarInner.style.width = Builder.data.getProgressBarNumbers() + "%";
    if (Builder.nodes.playedSlide) {
      Builder.nodes.slides.removeChild(Builder.nodes.playedSlide);
    }
    Builder.nodes.playedSlide = Builder.nodes.currentSlide;
    Builder.nodes.currentSlide = Builder.nodes.nextSlide;
    Builder.nodes.currentSlide.addEventListener('webkitTransitionEnd', function(event) {
      if (Builder.events.advancedSlide) {
        Builder.events.advancedSlide();
      }
      return Builder.states.animating = false;
    }, false);
    Builder.nodes.currentSlide.addEventListener('transitionend', function(event) {
      if (Builder.events.advancedSlide) {
        Builder.events.advancedSlide();
      }
      return Builder.states.animating = false;
    }, false);
    Builder.nodes.currentSlide.addEventListener('oTransitionEnd', function(event) {
      if (Builder.events.advancedSlide) {
        Builder.events.advancedSlide();
      }
      return Builder.states.animating = false;
    }, false);
    Builder.nodes.currentSlide.addEventListener('otransitionend', function(event) {
      if (Builder.events.advancedSlide) {
        Builder.events.advancedSlide();
      }
      return Builder.states.animating = false;
    }, false);
    Builder.nodes.playedSlide.className += " played";
    Builder.nodes.currentSlide.className += " active";
    nextSlideData = Builder.data.slides[Builder.data.currentSlide + 1];
    if (nextSlideData) {
      Builder.nodes.nextSlide = Builder.partials.slide(nextSlideData);
      Builder.nodes.slides.appendChild(Builder.nodes.nextSlide);
    }
    if (Builder.callbacks.advanceSlide) {
      return Builder.callbacks.advanceSlide(Builder);
    }
  };
  Builder.events.loadingAnimation = function() {
    Builder.nodes.meNotMeContainer.className += " hide";
    Builder.nodes.slides.removeChild(Builder.nodes.currentSlide);
    return Builder.nodes.slides.insertBefore(Builder.partials.loadingAnimation(), Builder.nodes.slides.firstChild);
  };
  Builder.imageCache = Object();
  Builder.prefetchSlides = function(count) {
    var end, slide, start, _i, _len, _ref, _results;
    start = Builder.data.currentSlide - 1;
    end = Builder.data.currentSlide + 9;
    _ref = Builder.data.slides.slice(start, end);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slide = _ref[_i];
      if (!Builder.imageCache[slide.image_desktop_retina]) {
        Builder.imageCache[slide.image_desktop_retina] = new Image();
        _results.push(Builder.imageCache[slide.image_desktop_retina].src = slide.image_desktop_retina);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  Builder.events.setContainerSize = function() {
    var width;
    width = Builder.nodes.main.scrollWidth;
    Builder.nodes.container.className = Builder.nodes.container.className.replace(" medium", "");
    Builder.nodes.container.className = Builder.nodes.container.className.replace(" large", "");
    Builder.nodes.container.className = Builder.nodes.container.className.replace(" small", "");
    if (width < 480) {
      return Builder.nodes.container.className += " small";
    } else if (width < 768) {
      return Builder.nodes.container.className += " medium";
    }
  };
  Builder.events.onRotate = function(rotateEvent) {
    var orientationEvent, supportsOrientationChange;
    supportsOrientationChange = "onorientationchange" in window;
    orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
    return window.addEventListener(orientationEvent, function(event) {
      return rotateEvent(event);
    }, false);
  };
  Builder.states.initialized = false;
  Builder.initialize = function() {
    return Traitify.getSlides(assessmentId, function(data) {
      var setupScreen, style;
      Builder.data.currentSlide = 1;
      Builder.data.totalSlideLength = data.length;
      Builder.data.sentSlides = 0;
      Builder.data.slides = data.filter(function(slide) {
        return !slide.completed_at;
      });
      Builder.data.slidesToPlayLength = Builder.data.slides.length;
      style = Builder.partials.make("link", {
        href: "https://s3.amazonaws.com/traitify-cdn/assets/stylesheets/slide_deck.css",
        type: 'text/css',
        rel: "stylesheet"
      });
      Builder.nodes.main.innerHTML = "";
      Builder.nodes.main.appendChild(style);
      if (Builder.data.slides.length !== 0) {
        Builder.nodes.container = Builder.partials.slideDeckContainer();
        if (Builder.device) {
          Builder.nodes.container.className += " " + Builder.device;
          Builder.nodes.container.className += " mobile phone";
          if (options && options.nonTouch) {
            Builder.nodes.container.className += " non-touch";
          }
        }
        if (options && options.size) {
          Builder.nodes.container.className += " " + options.size;
        }
        Builder.nodes.main.appendChild(Builder.nodes.container);
        Builder.actions();
        Builder.prefetchSlides();
        Builder.events.setContainerSize();
        window.onresize = function() {
          if (!Builder.device) {
            return Builder.events.setContainerSize();
          }
        };
        if (Builder.device && Builder.device) {
          setupScreen = function() {
            var windowOrienter;
            windowOrienter = function() {
              return Builder.nodes.main.style.height = window.innerHeight + "px";
            };
            windowOrienter();
            return Builder.events.onRotate(function(event) {
              return windowOrienter();
            });
          };
          Builder.helpers.onload(function() {
            return setupScreen();
          });
          setupScreen();
        }
      } else {
        if (typeof selector !== "string") {
          options.container = Builder.nodes.main;
        }
        if (options && options.showResults !== false) {
          Builder.results = Traitify.ui.resultsDefault(assessmentId, selector, options);
        }
        if (Builder.callbacks.finished) {
          Builder.states.finished = true;
          Builder.callbacks.finished();
        }
      }
      if (Builder.callbacks.initialize) {
        Builder.callbacks.initialize(Builder);
      } else {
        Builder.states.initialized = true;
      }
      return Builder.data.currentSlideTime = new Date().getTime();
    });
  };
  Builder.callbacks = Object();
  Builder.onInitialize = function(callBack) {
    if (Builder.states.initialized === true) {
      callBack();
    }
    Builder.callbacks.initialize = callBack;
    return Builder;
  };
  Builder.onFinished = function(callBack) {
    if (Builder.states.finished === true) {
      callBack();
    }
    Builder.callbacks.finished = callBack;
    return Builder;
  };
  Builder.onAddSlide = function(callBack) {
    Builder.callbacks.addSlide = callBack;
    return Builder;
  };
  Builder.onMe = function(callBack) {
    Builder.callbacks.me = callBack;
    return Builder;
  };
  Builder.onNotMe = function(callBack) {
    Builder.callbacks.notMe = callBack;
    return Builder;
  };
  Builder.onAdvanceSlide = function(callBack) {
    Builder.callbacks.advanceSlide = callBack;
    return Builder;
  };
  Builder.initialize();
  return Builder;
};

Traitify.ui.resultsDefault = function(assessmentId, selector, options) {
  var Builder, selectedObject;
  Builder = Object();
  Builder.nodes = Object();
  Builder.states = Object();
  Builder.data = Object();
  if (typeof selector !== "string") {
    Builder.nodes.main = options.container;
  } else if (selector.indexOf("#") !== -1) {
    selector = selector.replace("#", "");
    Builder.nodes.main = document.getElementById(selector);
  } else {
    selector = selector.replace(".", "");
    selectedObject = document.getElementsByClassName(selector);
    Builder.nodes.main = selectedObject ? selectedObject[0] : null;
  }
  if (!Builder.nodes.main) {
    console.log("YOU MUST HAVE A TAG WITH A SELECTOR FOR THIS TO WORK");
    return false;
  }
  Builder.classes = function() {
    var classes, key;
    classes = Builder.main.className.split(" ");
    for (key in classes) {
      classes[key] = "." + classes[key];
    }
    return classes.join("");
  };
  Builder.partials = Object();
  Builder.partials.make = function(elementType, attributes) {
    var attributeName, element;
    element = document.createElement(elementType);
    for (attributeName in attributes) {
      element.setAttribute(attributeName, attributes[attributeName]);
    }
    return element;
  };
  Builder.partials.div = function(attributes) {
    return this.make("div", attributes);
  };
  Builder.partials.img = function(attributes) {
    return this.make("img", attributes);
  };
  Builder.partials.i = function(attributes) {
    return this.make("i", attributes);
  };
  Builder.nodes.personalityTypes = Array();
  Builder.partials.personalityType = function(typeData) {
    var badge, barLeft, barRight, name, nameAndScore, personalityType, score;
    personalityType = this.div({
      "class": "personality-type"
    });
    badge = Builder.partials.badge(typeData.personality_type.badge);
    if (typeData.score < 0) {
      barLeft = Builder.partials.barLeft(Math.abs(typeData.score));
      barRight = Builder.partials.barRight(0);
    } else {
      barLeft = Builder.partials.barLeft(0);
      barRight = Builder.partials.barRight(Math.abs(typeData.score));
    }
    name = this.div({
      "class": "name"
    });
    name.innerHTML = typeData.personality_type.name;
    score = this.div({
      "class": "score"
    });
    score.innerHTML = typeData.score < 0 ? "(" + (Math.round(Math.abs(typeData.score))) + ")" : Math.round(typeData.score);
    nameAndScore = this.div({
      "class": "name-and-score"
    });
    nameAndScore.appendChild(name);
    nameAndScore.appendChild(score);
    personalityType.appendChild(nameAndScore);
    personalityType.appendChild(barLeft);
    personalityType.appendChild(badge);
    personalityType.appendChild(barRight);
    Builder.nodes.personalityTypes.push({
      personalityType: personalityType,
      badge: badge
    });
    return personalityType;
  };
  Builder.partials.badge = function(badgeData) {
    var badge;
    badge = this.div({
      "class": "badge"
    });
    badge.appendChild(this.img({
      src: badgeData.image_large
    }));
    return badge;
  };
  Builder.partials.barLeft = function(scoreData) {
    var barLeft, innerBarLeft, last;
    last = Builder.nodes.personalityTypes.length - 1;
    innerBarLeft = this.div({
      "class": "bar-inner-left"
    });
    innerBarLeft.style.width = scoreData + "%";
    barLeft = this.div({
      "class": "bar-left"
    });
    barLeft.appendChild(innerBarLeft);
    return barLeft;
  };
  Builder.partials.barRight = function(scoreData) {
    var barRight, innerBarRight, last;
    last = Builder.nodes.personalityTypes.length - 1;
    innerBarRight = this.div({
      "class": "bar-inner-right"
    });
    innerBarRight.style.width = scoreData + "%";
    barRight = this.div({
      "class": "bar-right"
    });
    barRight.appendChild(innerBarRight);
    return barRight;
  };
  Builder.partials.toggleTraits = function() {
    var toggleTraits;
    toggleTraits = this.div({
      "class": "toggle-traits"
    });
    toggleTraits.innerHTML = "Show / Hide Traits";
    Builder.nodes.toggleTraits = toggleTraits;
    return toggleTraits;
  };
  Builder.nodes.personalityTraits = Array();
  Builder.partials.personalityTrait = function(personalityTraitData) {
    var leftName, personalityTrait, rightName, traitScorePosition;
    personalityTrait = this.div({
      "class": "personality-trait"
    });
    leftName = this.div({
      "class": "left-name"
    });
    leftName.innerHTML = personalityTraitData.left_personality_trait.name;
    rightName = this.div({
      "class": "right-name"
    });
    rightName.innerHTML = personalityTraitData.right_personality_trait.name;
    personalityTrait.appendChild(leftName);
    personalityTrait.appendChild(rightName);
    traitScorePosition = Builder.partials.traitScorePosition(personalityTraitData.score);
    personalityTrait.appendChild(traitScorePosition);
    Builder.nodes.personalityTraits.push({
      personalityTrait: personalityTrait,
      leftName: leftName,
      rightName: rightName,
      score: traitScorePosition
    });
    return personalityTrait;
  };
  Builder.partials.traitScorePosition = function(score) {
    var personalityTraitLine, personalityTraitScore, personalityTraitScoreContainer, personalityTraitScoreWrapper;
    personalityTraitScoreContainer = this.div({
      "class": "score-container"
    });
    personalityTraitScoreWrapper = this.div({
      "class": "score-wrapper"
    });
    personalityTraitScoreContainer.appendChild(personalityTraitScoreWrapper);
    personalityTraitScore = this.div({
      "class": "score"
    });
    personalityTraitScore.style.left = score + "%";
    personalityTraitScoreWrapper.appendChild(personalityTraitScore);
    personalityTraitLine = this.div({
      "class": "line"
    });
    personalityTraitScoreContainer.appendChild(personalityTraitLine);
    return personalityTraitScoreContainer;
  };
  Builder.partials.printButton = function() {
    var printButton;
    printButton = this.div({
      "class": "print-button"
    });
    Builder.nodes.printButton = printButton;
    printButton.innerHTML = "Print";
    return printButton;
  };
  Builder.actions = function() {
    if (Builder.nodes.toggleTraits) {
      Builder.nodes.toggleTraits.onclick = function() {
        if (Builder.nodes.personalityTraitContainer) {
          if (Builder.nodes.personalityTypesContainer.style.display === "block") {
            Builder.nodes.personalityTypesContainer.style.display = "none";
            return Builder.nodes.personalityTraitContainer.style.display = "block";
          } else {
            Builder.nodes.personalityTypesContainer.style.display = "block";
            return Builder.nodes.personalityTraitContainer.style.display = "none";
          }
        } else {
          return Traitify.getPersonalityTraits(assessmentId, function(data) {
            var personalityTrait, personalityTraitContainer, _i, _len;
            personalityTraitContainer = Builder.partials.div({
              "class": "personality-traits"
            });
            Builder.nodes.personalityTraitContainer = personalityTraitContainer;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              personalityTrait = data[_i];
              personalityTraitContainer.appendChild(Builder.partials.personalityTrait(personalityTrait));
            }
            Builder.nodes.container.appendChild(personalityTraitContainer);
            Builder.nodes.personalityTypesContainer.style.display = "none";
            return Builder.nodes.personalityTraitContainer.style.display = "block";
          });
        }
      };
    }
    return Builder.nodes.printButton.onclick = function() {
      var title;
      Builder.printWindow = window.open();
      Builder.nodes.printWindow = Object();
      Builder.nodes.printWindow.head = Builder.printWindow.document.getElementsByTagName("head")[0];
      Builder.nodes.printWindow.main = Builder.printWindow.document.getElementsByTagName("body")[0];
      Builder.nodes.printContainer = Builder.partials.div({
        "class": "tf-results-prop"
      });
      Builder.nodes.printContainer.appendChild(Builder.nodes.stylesheet.cloneNode(true));
      Builder.nodes.printContainer.appendChild(Builder.nodes.personalityTypesContainer.cloneNode(true));
      if (Builder.nodes.personalityTraitContainer) {
        Builder.nodes.printContainer.appendChild(Builder.nodes.personalityTraitContainer.cloneNode(true));
      }
      Builder.nodes.printWindow.main.appendChild(Builder.nodes.printContainer);
      title = Builder.partials.make("title");
      title.innerHTML = "PERSONALITY TO PRINT";
      return Builder.nodes.printWindow.head.appendChild(title);
    };
  };
  Builder.states.initialized = false;
  Builder.initialize = function() {
    Builder.nodes.main.innerHTML = "";
    return Traitify.getPersonalityTypes(assessmentId, function(data) {
      var personalityType, style, toolsContainer, _i, _len, _ref;
      Builder.data.personalityTypes = data.personality_types;
      style = Builder.partials.make("link", {
        href: "https://s3.amazonaws.com/traitify-cdn/assets/stylesheets/results_prop.css",
        type: 'text/css',
        rel: "stylesheet"
      });
      Builder.nodes.stylesheet = style;
      Builder.nodes.main.appendChild(style);
      Builder.nodes.container = Builder.partials.div({
        "class": "tf-results-prop"
      });
      toolsContainer = Builder.partials.div({
        "class": "tools"
      });
      Builder.nodes.toolsContainer = toolsContainer;
      toolsContainer.appendChild(Builder.partials.printButton());
      if (options && options.traits) {
        toolsContainer.appendChild(Builder.partials.toggleTraits());
      }
      Builder.nodes.container.appendChild(toolsContainer);
      Builder.nodes.personalityTypesContainer = Builder.partials.div({
        "class": "personality-types"
      });
      Builder.nodes.container.appendChild(Builder.nodes.personalityTypesContainer);
      _ref = Builder.data.personalityTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        personalityType = _ref[_i];
        Builder.nodes.personalityTypesContainer.appendChild(Builder.partials.personalityType(personalityType));
      }
      Builder.nodes.main.appendChild(Builder.nodes.container);
      Builder.actions();
      if (Builder.callbacks.initialize) {
        return Builder.callbacks.initialize(Builder);
      } else {
        return Builder.states.initialized = true;
      }
    });
  };
  Builder.callbacks = Object();
  Builder.onInitialize = function(callBack) {
    if (Builder.states.initialized === true) {
      callBack();
    } else {
      Builder.callbacks.initialize = callBack;
    }
    return Builder;
  };
  Builder.initialize();
  return Builder;
};
