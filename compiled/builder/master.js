// Generated by CoffeeScript 1.8.0
var Bldr;

Bldr = function(selector, options) {
  var Builder, selectedObject;
  Builder = Object();
  Builder.nodes = Object();
  Builder.nodes.add = function(name, content) {
    return Builder.nodes[name] = content;
  };
  Builder.nodes.addDiv = function(name, attrs, innerHTML) {
    return Builder.nodes.addTag("div", name, attrs, innerHTML);
  };
  Builder.nodes.addImg = function(name, attrs) {
    return Builder.nodes.addTag("img", name, attrs);
  };
  Builder.nodes.addTag = function(tag, name, attrs, innerHTML) {
    if (attrs == null) {
      attrs = Object();
    }
    if (!attrs["class"]) {
      attrs["class"] = Builder.helpers.toDash(name);
    }
    Builder.nodes[name] = Builder.partials[tag](attrs);
    if (innerHTML) {
      Builder.nodes[name].innerHTML = innerHTML;
    }
    return Builder.nodes[name];
  };
  Builder.states = Object();
  Builder.data = Object();
  Builder.states.values = Object();
  Builder.states.add = function(name, value) {
    Builder.states.values[name] = value != null ? value : false;
    return Builder.states[name] = function(value) {
      if (value != null) {
        return Builder.states.values[name] = value;
      } else {
        return Builder.states.values[name];
      }
    };
  };
  Builder.states.add("logging");
  if (typeof options === "undefined") {
    options = Object();
  }
  if (navigator.userAgent.match(/iPad/i)) {
    Builder.device = "ipad";
  }
  if (navigator.userAgent.match(/iPhone/i)) {
    Builder.device = "iphone";
  }
  if (navigator.userAgent.match(/Android/i)) {
    Builder.device = "android";
  }
  if (navigator.userAgent.match(/BlackBerry/i)) {
    Builder.device = "blackberry";
  }
  if (navigator.userAgent.match(/webOS/i)) {
    Builder.device = "webos";
  }
  if (typeof selector !== "string") {
    Builder.nodes.main = document.createElement("div");
    document.getElementsByTagName("body")[0].appendChild(Builder.nodes.main);
  } else if (selector.indexOf("#") !== -1) {
    selector = selector.replace("#", "");
    Builder.nodes.main = document.getElementById(selector);
  } else {
    selector = selector.replace(".", "");
    selectedObject = document.getElementsByClassName(selector);
    Builder.nodes.main = selectedObject ? selectedObject[0] : null;
  }
  Builder.data.selector = selector;
  if (!Builder.nodes.main) {
    console.log("YOU MUST HAVE A TAG WITH A SELECTOR FOR THIS TO WORK");
    return false;
  }
  Builder.data = Object();
  Builder.partials = Object();
  Builder.partials.make = function(elementType, attributes) {
    var attributeName, element;
    element = document.createElement(elementType);
    for (attributeName in attributes) {
      element.setAttribute(attributeName, attributes[attributeName]);
    }
    return element;
  };
  Builder.partials.div = function(attributes) {
    return this.make("div", attributes);
  };
  Builder.partials.img = function(attributes) {
    return this.make("img", attributes);
  };
  Builder.partials.i = function(attributes) {
    return this.make("i", attributes);
  };
  Builder.partials.add = function(name, callback) {
    return Builder.partials[name] = callback;
  };
  Builder.partials.render = function(name, options) {
    return Builder.partials[name](options);
  };
  Builder.callbacks = Object();
  Builder.callbacks.triggered = Object();
  Builder.callbacks.trigger = function(name) {
    if (Builder.callbacks[name]) {
      return Builder.callbacks[name](Builder);
    } else {
      return Builder.callbacks.triggered[name] = true;
    }
  };
  Builder.callbacks.add = function(name) {
    return Builder["on" + name] = function(callback) {
      if (Builder.callbacks.triggered[name]) {
        return callback();
      } else {
        return Builder.callbacks[name] = callback;
      }
    };
  };
  Builder.render = function(widgetNodes) {
    return Builder.nodes.main.appendChild(widgetNodes);
  };
  Builder.helpers = Object();
  Builder.helpers.toDash = function(text) {
    if (text) {
      return text.replace(/([A-Z])/g, function($1) {
        return "-" + $1.toLowerCase();
      });
    }
  };
  Builder.events = Object();
  Builder.events.stack = Array();
  Builder.events.add = function(callback) {
    return Builder.events.stack.push(callback);
  };
  Builder.initializationEvents = Array();
  Builder.initialization = Object();
  Builder.initialization.events = Object();
  Builder.initialization.events.stack = Array();
  Builder.initialization.events.add = function(description, callback) {
    if (callback) {
      return Builder.initialization.events.stack.push({
        description: description,
        callback: callback
      });
    }
  };
  Builder.initialize = function() {
    var error, event, stack, _i, _j, _len, _len1, _ref, _results;
    stack = Builder.initialization.events.stack;
    for (_i = 0, _len = stack.length; _i < _len; _i++) {
      event = stack[_i];
      if (Builder.states.logging()) {
        Builder.log(event.description);
        try {
          event.callback();
        } catch (_error) {
          error = _error;
          Builder.log(error.message);
        }
      } else {
        event.callback();
      }
    }
    _ref = Builder.events.stack;
    _results = [];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      event = _ref[_j];
      _results.push(event());
    }
    return _results;
  };
  return Builder;
};
