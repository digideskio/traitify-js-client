// Generated by CoffeeScript 1.8.0
this.Traitify = new (function() {
  var tfPromise;
  tfPromise = function(callback) {
    var localPromise;
    localPromise = Object();
    localPromise.then = function(callback) {
      if (localPromise.resolved) {
        callback(localPromise.data);
        localPromise;
      } else {
        localPromise.thenCallback = callback;
      }
      return localPromise;
    };
    localPromise.resolved = false;
    localPromise.resolve = function(data) {
      localPromise.data = data;
      if (localPromise.thenCallback) {
        localPromise.thenCallback(data);
      } else {
        localPromise.resolved = true;
      }
      return localPromise;
    };
    localPromise["catch"] = function(callback) {
      if (localPromise.rejected) {
        callback(localPromise.error);
      } else {
        localPromise.rejectCallback = callback;
      }
      return localPromise;
    };
    localPromise.rejected = false;
    localPromise.reject = function(error) {
      localPromise.error = error;
      if (localPromise.rejectCallback) {
        localPromise.rejectCallback(data);
      } else {
        localPromise.rejected = true;
      }
      return localPromise;
    };
    callback(localPromise.resolve, localPromise.reject);
    return localPromise;
  };
  this.host = "https://api.traitify.com";
  this.version = "v1";
  this.testMode = false;
  this.setTestMode = function(mode) {
    this.testMode = mode;
    return this;
  };
  this.setHost = function(host) {
    host = host.replace("http://", "").replace("https://", "");
    host = "https://" + host;
    this.host = host;
    return this;
  };
  this.setPublicKey = function(key) {
    this.publicKey = key;
    return this;
  };
  this.setVersion = function(version) {
    this.version = version;
    return this;
  };
  this.ajax = function(url, method, callback, params) {
    var xhr;
    url = "" + this.host + "/" + this.version + url;
    xhr = new XMLHttpRequest();
    if ("withCredentials" in xhr) {
      xhr.open(method, url, true);
    } else if (typeof XDomainRequest !== "undefined") {
      xhr = new XDomainRequest();
      xhr.open(method, url);
    } else {
      console.log("There was an error making the request.");
      xhr = null;
    }
    xhr;
    xhr.open(method, url, true);
    xhr.setRequestHeader("Authorization", "Basic " + btoa(this.publicKey + ":x"));
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.setRequestHeader("Accept", "application/json");
    xhr.onload = function() {
      var data;
      data = JSON.parse(xhr.response);
      callback(data);
      return false;
    };
    xhr.send(params);
    xhr;
    return this;
  };
  this.put = function(url, params, callback) {
    this.ajax(url, "PUT", callback, params);
    return this;
  };
  this.get = function(url, callback) {
    this.ajax(url, "GET", callback, "");
    return this;
  };
  this.getDecks = function(callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error;
      try {
        return Traitify.get("/decks", function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.getSlides = function(id, callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error;
      try {
        return Traitify.get("/assessments/" + id + "/slides", function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.addSlide = function(assessmentId, slideId, value, timeTaken, callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error;
      try {
        return Traitify.put("/assessments/" + assessmentId + "/slides/" + slideId, JSON.stringify({
          "response": value,
          "time_taken": timeTaken
        }), function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.addSlides = function(assessmentId, values, callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error;
      try {
        return Traitify.put("/assessments/" + assessmentId + "/slides", JSON.stringify(values), function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.getPersonalityTypes = function(id, options, callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error, key, params, _i, _len, _ref;
      try {
        if (options == null) {
          options = Object();
        }
        params = Array();
        _ref = Object.keys(options);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          params.push("" + key + "=" + options[key]);
        }
        return Traitify.get("/assessments/" + id + "/personality_types?" + (params.join("&")), function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.getPersonalityTraits = function(id, options, callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error;
      try {
        return Traitify.get("/assessments/" + id + "/personality_traits", function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.getPersonalityTypesTraits = function(assessmentId, personalityTypeId, callback) {
    var promise;
    promise = new tfPromise(function(resolve, reject) {
      var error;
      try {
        return Traitify.get("/assessments/" + assessmentId + "/personality_types/" + personalityTypeId + "/personality_traits", function(data) {
          if (callback) {
            callback(data);
          }
          if (resolve) {
            return resolve(data);
          }
        });
      } catch (_error) {
        error = _error;
        if (reject) {
          return reject(error);
        }
      }
    });
    return promise;
  };
  this.ui = Object();
  return this;
})();
