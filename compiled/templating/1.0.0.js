// Generated by CoffeeScript 1.7.1
var Templating;

Templating = function() {
  var Builder;
  Builder = Object();
  Builder.analytics = Object();
  Builder.analytics.startTime = new Date().getTime();
  Builder.nodes = Object();
  Builder.callbacks = Object();
  Builder.query = function(query) {
    return document.querySelectorAll(query);
  };
  Builder.templates = Object();
  Builder.templates.results = function() {};
  Builder.templates.personalityTypes = function() {};
  Builder.templates.setup = function() {
    return Builder.templates.personalityTypes = Builder.query("template[name=tf-personality-types]");
  };
  Builder.helpers = Object();
  Builder.helpers.onload = function(callBack) {
    if (window.addEventListener) {
      return window.addEventListener('load', callBack);
    } else if (window.attachEvent) {
      return window.attachEvent('onload', callBack);
    }
  };
  Builder.templates.renderResults = function(assessmentId, personalityType) {
    var oldPersonalityTypes, _i, _len, _ref;
    if (Builder.templates[personalityType]) {
      _ref = Builder.templates[personalityType];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oldPersonalityTypes = _ref[_i];
        personalityType.parentNode.removeChild(oldPersonalityTypes);
      }
    }
    Builder.templates[personalityType] = Array();
    Builder.analytics.startTypesTime = new Date().getTime();
    return Traitify.getPersonalityTypes(assessmentId, function(data) {
      var attribute, attributeValue, color_1, color_2, color_3, index, innerHTML, name, personalityTypeData, personalityTypesNode, scoreValue, _j, _len1, _ref1;
      Builder.analytics.endTypesTime = new Date().getTime();
      Builder.analytics.afterGettingResults = new Date().getTime();
      if (personalityType.getAttribute("hero-type")) {
        data = data.slice(0, 1);
      }
      for (index in data.personality_types) {
        personalityTypeData = data.personality_types[index];
        personalityTypesNode = document.createElement("div");
        personalityTypesNode.innerHTML = personalityType.innerHTML;
        color_1 = personalityTypeData.personality_type.badge.color_1;
        color_2 = personalityTypeData.personality_type.badge.color_2;
        color_3 = personalityTypeData.personality_type.badge.color_3;
        innerHTML = personalityTypesNode.innerHTML;
        console.log(personalityTypeData.score);
        if (personalityTypeData.score > 0) {
          scoreValue = Math.round(personalityTypeData.score);
        } else {
          scoreValue = "(" + (Math.abs(Math.round(personalityTypeData.score))) + ")";
        }
        innerHTML = innerHTML.replace(/{{score}}/g, scoreValue);
        innerHTML = innerHTML.replace(/{{name}}/g, personalityTypeData.personality_type.name);
        innerHTML = innerHTML.replace(/{{badge.large}}/g, personalityTypeData.personality_type.badge.image_large);
        innerHTML = innerHTML.replace(/{{badge.medium}}/g, personalityTypeData.personality_type.badge.image_medium);
        innerHTML = innerHTML.replace(/{{badge.small}}/g, personalityTypeData.personality_type.badge.image_small);
        innerHTML = innerHTML.replace(/{{color.light}}/g, color_1);
        innerHTML = innerHTML.replace(/{{color.medium}}/g, color_2);
        innerHTML = innerHTML.replace(/{{color.dark}}/g, color_3);
        innerHTML = innerHTML.replace(/{{index}}/g, index);
        innerHTML = innerHTML.replace(/{{description}}/g, personalityTypeData.personality_type.description);
        name = personalityTypeData.personality_type.name;
        innerHTML = innerHTML.replace(/{{name.lowercase}}/g, name.toLowerCase());
        innerHTML = innerHTML.replace(/{{name.camelcase}}/g, name);
        innerHTML = innerHTML.replace(/{{name.uppercase}}/g, name.toUpperCase());
        personalityTypesNode.innerHTML = innerHTML;
        personalityType.parentNode.insertBefore(personalityTypesNode, personalityType);
        Builder.templates[personalityType].push(personalityTypesNode);
        _ref1 = personalityType.attributes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          attribute = _ref1[_j];
          if (attribute.name !== "name") {
            attributeValue = attribute.value;
            attributeValue = attributeValue.replace(/{{color.light}}/g, color_1);
            attributeValue = attributeValue.replace(/{{color.medium}}/g, color_2);
            attributeValue = attributeValue.replace(/{{color.dark}}/g, color_3);
            personalityTypesNode.setAttribute(attribute.name, attributeValue);
          }
        }
      }
      return Builder.analytics.endTime = new Date().getTime();
    });
  };
  Builder.bindings = Object();
  Builder.bindings.personalityTypes = function() {
    var assessmentId, personalityType, _i, _len, _ref, _results;
    _ref = Builder.templates.personalityTypes;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      personalityType = _ref[_i];
      assessmentId = personalityType.getAttribute("assessment-id");
      if (assessmentId) {
        _results.push(Builder.templates.render(assessmentId, personalityType));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  Builder.bindings.names = function(personalityType, names) {
    var name, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      _results.push(name.innerHTML = personalityType.personality_type.name);
    }
    return _results;
  };
  Builder.bindings.badges = function(personalityType, badges) {
    var badge, image, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = badges.length; _i < _len; _i++) {
      badge = badges[_i];
      image = document.createElement("img");
      image.src = personalityType.personality_type.badge.image_large;
      image.style.width = "100%";
      _results.push(badge.appendChild(image));
    }
    return _results;
  };
  Builder.bindings.scores = function(personalityType, scores) {
    var score, scoreValue, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = scores.length; _i < _len; _i++) {
      score = scores[_i];
      if (personalityType.score > 0) {
        scoreValue = Math.round(personalityType.score);
      } else {
        scoreValue = "(" + (Math.abs(Math.round(personalityType.score))) + ")";
      }
      _results.push(score.innerHTML = scoreValue);
    }
    return _results;
  };
  Builder.initialize = function() {
    Builder.templates.setup();
    Builder.bindings.personalityTypes();
    return Builder;
  };
  if (Builder.callbacks.initialized) {
    Builder.callbacks.initialized();
  } else {
    Builder.initialized = true;
  }
  Builder.autoInitialize = function() {
    return Builder.helpers.onload(function() {
      return Builder.initialize();
    });
  };
  Builder.callbacks = Object();
  Builder.onInitialize = function(callBack) {
    if (Builder.initialized === true) {
      callBack();
    }
    return Builder.callbacks.initialized = callBack;
  };
  return Builder;
};

window.Traitify.templating = Templating();
